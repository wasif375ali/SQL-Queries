
ALTER TABLE [dbo].[INV_INVENTORY_PICK_ORDERS]
    ADD [MANIFEST_NUMBER]        VARCHAR (50)  NULL,
        [PACKAGE_ID]             VARCHAR (50)  NULL,
        [PACKAGE_ID_AND_LINK]    VARCHAR (500) NULL,
        [ESTIMATED_CHARGES]      FLOAT (53)    NULL,
        [SHIPPING_SUCCEED]       VARCHAR (1)   NULL,
        [ICS_SHIPPING_USED_FLAG] VARCHAR (1)   NULL;
		
--------------------------------------------

CREATE TABLE [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES] (
    [CREATE_DATE]      DATETIMEOFFSET (6) NOT NULL,
    [CREATE_USER]      VARCHAR (30)       NOT NULL,
    [LAST_UPDATE_DATE] DATETIMEOFFSET (6) NULL,
    [LAST_UPDATE_USER] VARCHAR (30)       NULL,
    [CUS_DRPSHP_ID]    FLOAT (53)         NOT NULL,
    [CUS_ID]           FLOAT (53)         NOT NULL,
    [ADDRESS_1]        VARCHAR (255)      NULL,
    [ADDRESS_2]        VARCHAR (255)      NULL,
    [PROSTA_ID]        FLOAT (53)         NULL,
    [CITY]             VARCHAR (50)       NULL,
    [POSTAL_CODE]      VARCHAR (15)       NULL,
    [TEN_ID]           FLOAT (53)         NULL,
    [ACTIVE_FLAG]      VARCHAR (1)        NULL,
    [FIRST_NAME]       VARCHAR (50)       NULL,
    [LAST_NAME]        VARCHAR (50)       NULL,
    [PHONE]            VARCHAR (25)       NULL,
    PRIMARY KEY CLUSTERED ([CUS_DRPSHP_ID] ASC)
);
--------------------------------------------
ALTER TABLE [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES]
    ADD DEFAULT ('Y') FOR [ACTIVE_FLAG];
--------------------------------------------
ALTER TABLE [dbo].[INV_INVENTORY_TRANSFERS]
    ADD DEFAULT ('N') FOR [TRANSFER_BY_SKU_FLAG];
--------------------------------------------
ALTER TABLE [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES] WITH NOCHECK
    ADD FOREIGN KEY ([CUS_ID]) REFERENCES [dbo].[YM_CUSTOMERS] ([CUS_ID]);
--------------------------------------------

ALTER TABLE [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES] WITH NOCHECK
    ADD CONSTRAINT [CUS_DRPSHP_PROSTA_FK] FOREIGN KEY ([PROSTA_ID]) REFERENCES [dbo].[ADM_PROVINCE_STATES] ([PROSTA_ID]);

--------------------------------------------

ALTER TABLE [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES] WITH NOCHECK
    ADD FOREIGN KEY ([TEN_ID]) REFERENCES [dbo].[SYS_TENANTS] ([TEN_ID]);

--------------------------------------------

ALTER TABLE [dbo].[INV_INVENTORY_TRANSFERS] WITH NOCHECK
    ADD CONSTRAINT [INVTRA_WAR_TO_FK] FOREIGN KEY ([WAR_ID_TO]) REFERENCES [dbo].[INV_WAREHOUSES] ([WAR_ID]);

--------------------------------------------

ALTER TRIGGER  [dbo].[INV_INVENTORY_PICK_ORDERS_INSERT]
   ON   [dbo].[INV_INVENTORY_PICK_ORDERS]
    INSTEAD OF INSERT
      AS 
         
         BEGIN
 
            DECLARE
                
               @new$CREATE_DATE   datetimeoffset(6), 
               @new$CREATE_USER   varchar(30),
			   @new$TEN_ID        float(53), 
               @new$PICKORD_ID     FLOAT(53),
			   @PRC_PICKORD_ID     FLOAT(53)
			   
			 	SELECT @PRC_PICKORD_ID = PICKORD_ID FROM inserted
				IF @PRC_PICKORD_ID IS NOT NULL
				SET @new$PICKORD_ID = @PRC_PICKORD_ID 

				    SET @new$CREATE_DATE = sysdatetimeoffset()
					SET @new$CREATE_USER =  isnull(DBO.[get_context_value]('USER_USER_NAME'), session_user)
				    SET @new$TEN_ID = dbo.get_ten_id_from_context()

IF @new$PICKORD_ID IS NOT NULL
INSERT INTO  [INV_INVENTORY_PICK_ORDERS]
           (
	[CREATE_DATE],
	[CREATE_USER] ,
	[LAST_UPDATE_DATE] ,
	[LAST_UPDATE_USER],
	[TEN_ID],
	[PICKORD_ID],
	[PICKORD_NUMBER],
	[PICKORD_DATE] ,
	[USE_ID_ASSIGNED_TO],
	[REFERENCE_NUMBER],
	[CUS_ID] ,
	[DISPATCH_NOTES] ,
	[INTERNAL_NOTES] ,
	[CUSTOMER_REPORT_NOTES],
	[TERMS_CONDITION] ,
	[FINALIZED_DATE] ,
	[USE_ID_FINALIZED_BY] ,
	[VOID_DATE],
	[VOID_NOTES] ,
	APPROVED_DATE,
	USE_ID_APPROVED_BY,
	COMPLETED_DATE,
	USE_ID_COMPLETED_BY,
	WAR_ID,
	SALEORD_ID,
	PURGRO_ID,
	MANIFEST_NUMBER,
	PACKAGE_ID,
	PACKAGE_ID_AND_LINK,
	ESTIMATED_CHARGES,
	SHIPPING_SUCCEED,
	ICS_SHIPPING_USED_FLAG
	)		   

SELECT 
	
	@new$CREATE_DATE,
    @new$CREATE_USER,
    [LAST_UPDATE_DATE],
    [LAST_UPDATE_USER],
    @new$TEN_ID,
	[PICKORD_ID],
	[PICKORD_NUMBER],
	[PICKORD_DATE] ,
	[USE_ID_ASSIGNED_TO],
	[REFERENCE_NUMBER],
	[CUS_ID] ,
	[DISPATCH_NOTES] ,
	[INTERNAL_NOTES] ,
	[CUSTOMER_REPORT_NOTES],
	[TERMS_CONDITION] ,
	[FINALIZED_DATE] ,
	[USE_ID_FINALIZED_BY] ,
	[VOID_DATE],
	[VOID_NOTES],
	APPROVED_DATE,
	USE_ID_APPROVED_BY,
	COMPLETED_DATE,
	USE_ID_COMPLETED_BY,
	WAR_ID,
	SALEORD_ID,
	PURGRO_ID,
	MANIFEST_NUMBER,
	PACKAGE_ID,
	PACKAGE_ID_AND_LINK,
	ESTIMATED_CHARGES,
	SHIPPING_SUCCEED,
	ICS_SHIPPING_USED_FLAG

	   FROM INSERTED

ELSE
 INSERT INTO  [INV_INVENTORY_PICK_ORDERS]
           (
	[CREATE_DATE],
	[CREATE_USER] ,
	[LAST_UPDATE_DATE] ,
	[LAST_UPDATE_USER],
	[TEN_ID],
	[PICKORD_ID],
	[PICKORD_NUMBER],
	[PICKORD_DATE] ,
	[USE_ID_ASSIGNED_TO],
	[REFERENCE_NUMBER],
	[CUS_ID] ,
	[DISPATCH_NOTES] ,
	[INTERNAL_NOTES] ,
	[CUSTOMER_REPORT_NOTES],
	[TERMS_CONDITION] ,
	[FINALIZED_DATE] ,
	[USE_ID_FINALIZED_BY] ,
	[VOID_DATE],
	[VOID_NOTES] ,
	APPROVED_DATE,
	USE_ID_APPROVED_BY,
	COMPLETED_DATE,
	USE_ID_COMPLETED_BY,
	WAR_ID,
	SALEORD_ID,
	PURGRO_ID,
	MANIFEST_NUMBER,
	PACKAGE_ID,
	PACKAGE_ID_AND_LINK,
	ESTIMATED_CHARGES,
	SHIPPING_SUCCEED,
	ICS_SHIPPING_USED_FLAG
	)		   
SELECT 
	
	@new$CREATE_DATE,
    @new$CREATE_USER,
    [LAST_UPDATE_DATE],
    [LAST_UPDATE_USER],
    @new$TEN_ID,
	NEXT VALUE FOR ORASEQ,
	[PICKORD_NUMBER],
	[PICKORD_DATE] ,
	[USE_ID_ASSIGNED_TO],
	[REFERENCE_NUMBER],
	[CUS_ID] ,
	[DISPATCH_NOTES] ,
	[INTERNAL_NOTES] ,
	[CUSTOMER_REPORT_NOTES],
	[TERMS_CONDITION] ,
	[FINALIZED_DATE] ,
	[USE_ID_FINALIZED_BY] ,
	[VOID_DATE],
	[VOID_NOTES] ,
	APPROVED_DATE,
	USE_ID_APPROVED_BY,
	COMPLETED_DATE,
	USE_ID_COMPLETED_BY,
	WAR_ID,
	SALEORD_ID,
	PURGRO_ID,
	MANIFEST_NUMBER,
	PACKAGE_ID,
	PACKAGE_ID_AND_LINK,
	ESTIMATED_CHARGES,
	SHIPPING_SUCCEED,
	ICS_SHIPPING_USED_FLAG
	   FROM INSERTED
END
--------------------------------------------

CREATE TRIGGER [dbo].[TRG_CUSTOMERS_DROP_SHIP_ADDRESSES_UPDATE]
   ON  [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES]
   AFTER UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	    
            DECLARE 
               @new$LAST_UPDATE_DATE datetimeoffset(6), 
               @new$LAST_UPDATE_USER varchar(30)
   
            SET @new$LAST_UPDATE_DATE = sysdatetimeoffset()
            select @new$LAST_UPDATE_USER= isnull([dbo].[get_context_value]('USER_USER_NAME'), session_user)

			UPDATE CUSTOMERS_DROP_SHIP_ADDRESSES SET LAST_UPDATE_DATE = sysdatetimeoffset(), LAST_UPDATE_USER = session_user
			WHERE CUS_DRPSHP_ID IN (SELECT CUS_DRPSHP_ID FROM deleted)
END
--------------------------------------------

CREATE TRIGGER   [dbo].[TRG_CUSTOMERS_DROP_SHIP_ADDRESSES_INSERT]
   ON  [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES]
    INSTEAD OF INSERT
      AS  
         BEGIN 
            SET  NOCOUNT  ON 
            DECLARE 
               @new$CREATE_DATE datetimeoffset(6), 
               @new$CREATE_USER varchar(30),  
			   @new$TEN_ID float(53), 
               @new$CUS_DRPSHP_ID float(53),
			   @PRC_CUS_DRPSHP_ID float(53)
			   
			    SELECT @PRC_CUS_DRPSHP_ID = CUS_DRPSHP_ID FROM inserted
				IF @PRC_CUS_DRPSHP_ID IS NOT NULL
				SET @new$CUS_DRPSHP_ID = @PRC_CUS_DRPSHP_ID 
 
			SET @new$CREATE_DATE = sysdatetimeoffset()
			Select @new$CREATE_USER= isnull([dbo].[get_context_value]('USER_USER_NAME'), session_user) 
			SET @new$TEN_ID = dbo.get_ten_id_from_context()
 
IF @new$CUS_DRPSHP_ID IS NOT NULL		
INSERT INTO [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES]
           ([CREATE_DATE]
           ,[CREATE_USER]
           ,[LAST_UPDATE_DATE]
           ,[LAST_UPDATE_USER]
           ,[TEN_ID]
           ,[CUS_DRPSHP_ID]
		   ,[CUS_ID]
           ,[ADDRESS_1]
           ,[ADDRESS_2]
           ,[PROSTA_ID]
           ,[CITY]
           ,[POSTAL_CODE]
		   ,[ACTIVE_FLAG]
		   ,[FIRST_NAME]
		   ,[LAST_NAME]
		   ,[PHONE]
		   )
                      
       
SELECT @new$CREATE_DATE
      ,@new$CREATE_USER
      ,[LAST_UPDATE_DATE]
      ,[LAST_UPDATE_USER]
      ,@new$TEN_ID
      ,CUS_DRPSHP_ID
	  ,[CUS_ID]
      ,[ADDRESS_1]
      ,[ADDRESS_2]
      ,[PROSTA_ID]
      ,[CITY]
      ,[POSTAL_CODE]
	  ,[ACTIVE_FLAG]
		   ,[FIRST_NAME]
		   ,[LAST_NAME]
		   ,[PHONE]

	  FROM INSERTED
ELSE
INSERT INTO [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES]
           ([CREATE_DATE]
           ,[CREATE_USER]
           ,[LAST_UPDATE_DATE]
           ,[LAST_UPDATE_USER]
           ,[TEN_ID]
           ,[CUS_DRPSHP_ID]
		   ,[CUS_ID]
           ,[ADDRESS_1]
           ,[ADDRESS_2]
           ,[PROSTA_ID]
           ,[CITY]
           ,[POSTAL_CODE]
		   ,[ACTIVE_FLAG]
		   ,[FIRST_NAME]
		   ,[LAST_NAME]
		   ,[PHONE]
		   )
                      
       
SELECT @new$CREATE_DATE
      ,@new$CREATE_USER
      ,[LAST_UPDATE_DATE]
      ,[LAST_UPDATE_USER]
      ,@new$TEN_ID
      ,NEXT VALUE FOR ORASEQ 
	  ,[CUS_ID]
     ,[ADDRESS_1]
           ,[ADDRESS_2]
           ,[PROSTA_ID]
           ,[CITY]
           ,[POSTAL_CODE]
		   ,[ACTIVE_FLAG]
		   ,[FIRST_NAME]
		   ,[LAST_NAME]
		   ,[PHONE]

	  FROM INSERTED

 END
--------------------------------------------

ALTER VIEW [dbo].[INV_INVENTORY_PICK_ORDERS_WV](
	[CREATE_DATE],
	[CREATE_USER] ,
	[LAST_UPDATE_DATE] ,
	[LAST_UPDATE_USER],
	[TEN_ID],
	[PICKORD_ID],
	[PICKORD_NUMBER],
	[PICKORD_DATE] ,
	[USE_ID_ASSIGNED_TO],
	[REFERENCE_NUMBER],
	[CUS_ID] ,
	[DISPATCH_NOTES] ,
	[INTERNAL_NOTES] ,
	[CUSTOMER_REPORT_NOTES],
	[TERMS_CONDITION] ,
	[FINALIZED_DATE] ,
	[USE_ID_FINALIZED_BY] ,
	[VOID_DATE],
	[VOID_NOTES],
	APPROVED_DATE,
	USE_ID_APPROVED_BY,
	COMPLETED_DATE,
	USE_ID_COMPLETED_BY,
	WAR_ID,
	SALEORD_ID,
	PURGRO_ID,
	MANIFEST_NUMBER,
	PACKAGE_ID,
	PACKAGE_ID_AND_LINK,
	ESTIMATED_CHARGES,
	SHIPPING_SUCCEED,
	ICS_SHIPPING_USED_FLAG
	 )
AS
SELECT
	[CREATE_DATE],
	[CREATE_USER] ,
	[LAST_UPDATE_DATE] ,
	[LAST_UPDATE_USER],
	[TEN_ID],
	[PICKORD_ID],
	[PICKORD_NUMBER],
	[PICKORD_DATE] ,
	[USE_ID_ASSIGNED_TO],
	[REFERENCE_NUMBER],
	[CUS_ID] ,
	[DISPATCH_NOTES] ,
	[INTERNAL_NOTES] ,
	[CUSTOMER_REPORT_NOTES],
	[TERMS_CONDITION] ,
	[FINALIZED_DATE] ,
	[USE_ID_FINALIZED_BY] ,
	[VOID_DATE],
	[VOID_NOTES] ,
	APPROVED_DATE,
	USE_ID_APPROVED_BY,
	COMPLETED_DATE,
	USE_ID_COMPLETED_BY,
	WAR_ID,
	SALEORD_ID,
	PURGRO_ID,
	MANIFEST_NUMBER,
	PACKAGE_ID,
	PACKAGE_ID_AND_LINK,
	ESTIMATED_CHARGES,
	SHIPPING_SUCCEED,
	ICS_SHIPPING_USED_FLAG
	FROM [INV_INVENTORY_PICK_ORDERS];
--------------------------------------------

CREATE VIEW [dbo].[CUSTOMERS_DROP_SHIP_ADDRESSES_WV]
(
		[CREATE_DATE]
           ,[CREATE_USER]
           ,[LAST_UPDATE_DATE]
           ,[LAST_UPDATE_USER]
           ,[TEN_ID]
           ,[CUS_DRPSHP_ID]
		   ,[CUS_ID]
           ,[ADDRESS_1]
           ,[ADDRESS_2]
           ,[PROSTA_ID]
           ,[CITY]
           ,[POSTAL_CODE]
		   ,[ACTIVE_FLAG]
		   ,[FIRST_NAME]
		   ,[LAST_NAME]
		   ,[PHONE]
)
AS 
   
   SELECT 
		[CREATE_DATE]
           ,[CREATE_USER]
           ,[LAST_UPDATE_DATE]
           ,[LAST_UPDATE_USER]
           ,[TEN_ID]
           ,[CUS_DRPSHP_ID]
		   ,[CUS_ID]
           ,[ADDRESS_1]
           ,[ADDRESS_2]
           ,[PROSTA_ID]
           ,[CITY]
           ,[POSTAL_CODE]
		   ,[ACTIVE_FLAG]
		   ,[FIRST_NAME]
		   ,[LAST_NAME]
		   ,[PHONE]
	FROM 
	CUSTOMERS_DROP_SHIP_ADDRESSES
--------------------------------------------


ALTER PROCEDURE [dbo].[PKG_INVENTORY.PRC_GET_PICK_ORDER]  
				   @PI_PICKORD_ID float(53) = NULL,
				   @PI_OFFSET varchar(max) = NULL
AS 
    
   BEGIN

      BEGIN TRY

	SELECT 
			PK.PICKORD_ID,
			PK.[PICKORD_NUMBER] AS PICK_ORDER_NUMBER,
			PK.WAR_ID ,
			 ISNULL(WAR.CODE, '') + ' - ' + ISNULL(WAR.DESCRIPTION, '') AS INVENTORY,
			switchoffset(PK.PICKORD_DATE, DBO.[get_context_value]('USER_OFFSET')) AS PICK_ORDER_DATE,
			PK.[USE_ID_ASSIGNED_TO],
			USR.USERNAME AS ASSIGNED_TO,
		--	SO.[CHANNEL_ID] ,
			PK.[REFERENCE_NUMBER],
			PK.[CUS_ID] ,
			CUS.CODE AS CUSTOMER_CODE,
			CUS.CODE + ' - ' +CUS.NAME AS CUSTOMER_NAME,
		--	SO.[BILL_TO_ID],
		--	CUS_BILLTO.CODE + ' - '+CUS_BILLTO.NAME AS CUSTOMER_BILL_TO,
			CUS.ADDRESS_1 AS  SHIPPING_ADDRESS
			,CUS.ADDRESS_SAME_FLAG 
			,CUS.ADDRESS_2 AS BILLING_ADDRESS,
			CUS.BILLING_ADDRESS_2,
			CUS.SHIPPING_ADDRESS_2,

			CUS.POSTAL_CODE AS ZIP_CODE,
			CUS.CITY,
			CUS.PROSTA_ID,
			PROV.NAME AS PROVINCE_NAME,
			SHIPCOU.NAME AS COUNTRY,
			CUS.PHONE_1 AS PHONE,
			CUS.PHONE_2 AS CONTACT,
			CUS.EMAIL,
			CUS.EMAIL_2

			 ,CUS.BILLING_CITY
		   ,CUS.BILLING_PROSTA_ID
		   ,BILLPROV.CODE AS BILLING_PROVINCE_NAME
		   ,BILLCOU.CODE AS BILLING_COUNTRY
		   ,CUS.BILLING_POSTAL_CODE

		   ,   CUS.MASS_CUSTOMER_FLAG AS  MASS_CUSTOMER_FLAG,


			PK.[DISPATCH_NOTES] ,
			PK.[INTERNAL_NOTES] ,
			PK.[CUSTOMER_REPORT_NOTES],
			PK.[TERMS_CONDITION] ,
			PK.PURGRO_ID,
			PURGRO.CODE AS PURCHASE_GROUP,
			switchoffset(PK.FINALIZED_DATE, DBO.[get_context_value]('USER_OFFSET')) AS FINALIZED_DATE,
			switchoffset(PK.VOID_DATE, DBO.[get_context_value]('USER_OFFSET')) AS VOID_DATE,
			switchoffset(PK.COMPLETED_DATE, DBO.[get_context_value]('USER_OFFSET')) AS COMPLETED_DATE,
			switchoffset(PK.APPROVED_DATE, DBO.[get_context_value]('USER_OFFSET')) AS APPROVED_DATE,
			PK.[USE_ID_FINALIZED_BY] ,
			PK.[VOID_NOTES], 
			PK.SALEORD_ID,
			SO.SALEORD_NUMBER AS SALE_ORDER_NUMBER,
			switchoffset(SO.SALEORD_DATE  , DBO.[get_context_value]('USER_OFFSET')) AS SALE_ORDER_DATE
			,
            CASE
               WHEN PK.FINALIZED_DATE IS NULL THEN
					'N'
               ELSE
					'Y'
             END FINALIZED_FLAG,
             CASE
               WHEN PK.VOID_DATE IS NULL THEN
					'N'
               ELSE
					'Y'
             END VOID,
			 CASE
               WHEN PK.APPROVED_DATE IS NULL THEN
					'N'
               ELSE
					'Y'
             END APPROVED_FLAG,
			  CASE
               WHEN PK.COMPLETED_DATE IS NULL THEN
					'N'
               ELSE
					'Y'
             END COMPLETED_FLAG,
			  [dbo].[PKG_INVENTORY.PRC_GET_PICK_ORDER_CURRENT_STATUS]( pk.PICKORD_ID)  AS PL_CURRENT_STATUS,
			  TEN.TEN_ID,
			  TEN.NAME AS COMPANY_NAME,
			  TEN.CODE AS COMPANY_CODE,
			  TEN.POSTAL_CODE AS COMAPNY_POSTAL_CODE,
			  TEN.ADDRESS_1 AS COMPANY_ADDRESS_1,
			  TEN.ADDRESS_2 AS COMPANY_ADDRESS_2,
			  TEN.CITY AS COMPANY_CITY,
			  TEN.PHONE_1 AS COMPANY_PHONE_1,
			  TEN.PHONE_2 AS COMPANY_PHONE_2,
			  TEN.EMAIL AS COMPANY_EMAIL,
			  TEN.PROVINCE AS COMPANY_PROVINCE,
			  TEN.COUNTRY AS COMPANY_COUNTRY,
						PK.MANIFEST_NUMBER,
						PK.PACKAGE_ID,
						PK.PACKAGE_ID_AND_LINK,
						PK.ESTIMATED_CHARGES,
						PK.SHIPPING_SUCCEED,
						PK.ICS_SHIPPING_USED_FLAG



	FROM INV_INVENTORY_PICK_ORDERS_WV PK
		LEFT JOIN YM_USERS_WV USR
		  ON PK.USE_ID_ASSIGNED_TO = USR.USE_ID
		LEFT JOIN YM_CUSTOMERS_WV CUS
		  ON PK.CUS_ID = CUS.CUS_ID
		LEFT JOIN INV_INVENTORY_SALE_ORDERS_WV SO
		  ON SO.SALEORD_ID = PK.SALEORD_ID

		LEFT JOIN ADM_PROVINCE_STATES_WV PROV
		  ON CUS.PROSTA_ID = PROV.PROSTA_ID
		   LEFT JOIN ADM_COUNTRIES_WV SHIPCOU
			   ON SHIPCOU.COU_ID = PROV.COU_ID
		LEFT JOIN ADM_PURCHASE_GROUPS_WV PURGRO
		  ON PURGRO.PURGRO_ID = PK.PURGRO_ID
		LEFT JOIN INV_WAREHOUSES_WV WAR
		 ON WAR.WAR_ID = PK.WAR_ID
		   LEFT JOIN ADM_PROVINCE_STATES_WV BILLPROV
			   ON BILLPROV.PROSTA_ID = CUS.BILLING_PROSTA_ID
			   LEFT JOIN ADM_COUNTRIES_WV BILLCOU
			   ON BILLCOU.COU_ID = BILLPROV.COU_ID
			   LEFT JOIN SYS_TENANTS_WV TEN
			   ON PK.TEN_ID=TEN.TEN_ID
    
	WHERE PK.PICKORD_ID = @PI_PICKORD_ID;


	---------------------------------------
	--------------DETAILS ITMES==============


	  SELECT DET.PICKORDDET_ID,
             DET.PAR_ID,
--             WAR.LOC_ID,
             DET.SEQ_NUMBER,
             PART.CODE AS PART_NUMBER,
             PART.DESCRIPTION AS DESCRIPTION,
			 PART.UPC_MANUFACTURE,
			 PART.SKU_MANUFACTURE,
			 PART.NAME,
             DET.QUANTITY,
			 part.STANDARD_COST as Cost,
			 DET.SALEORDDET_ID,
			CASE WHEN DET.INVPARLOT_ID IS NOT NULL AND DET.WARSTOLOC_ID IS NOT NULL THEN
			  ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND] (DET.PAR_ID,DET.WAR_ID, DET.INVPARLOT_ID,DET.WARSTOLOC_ID, isnull(DATEADD(Second,-3,PL.APPROVED_DATE),SYSDATETIMEOFFSET())),0)
			 ELSE
				0
			 END AS QTY_ONHAND,
			 CASE WHEN DET.INVPARLOT_ID IS NOT NULL AND DET.WARSTOLOC_ID IS NOT NULL THEN
			
			  (ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOC_AVL] (DET.PAR_ID,DET.WAR_ID, DET.INVPARLOT_ID, DET.WARSTOLOC_ID, isnull(DATEADD(Second,-3,PL.APPROVED_DATE),SYSDATETIMEOFFSET())),0))
			 ELSE
				0
			 END  AS QTY_AVAILABLE ,  
			 CASE WHEN DET.INVPARLOT_ID IS NOT NULL THEN
				[dbo].[PKG_INVENTORY.GET_PURCHASE_GROUP](PARLOT.EXPIRY_DATE,'PURCHASE_GROUP')
			 ELSE
				NULL
			 END AS PURCHASE_GROUP,
			 CASE WHEN DET.INVPARLOT_ID IS NOT NULL THEN
				[dbo].[PKG_INVENTORY.GET_PURCHASE_GROUP](PARLOT.EXPIRY_DATE,'COLOR')
			 ELSE
				NULL
			 END AS PURCHASE_GROUP_COLOR,
             DET.PRICE PRICE,
             ROUND((ISNULL(DET.QUANTITY, 1) * (ISNULL(DET.PRICE, 0)- 0)), 2) - ISNULL(DET.DISCOUNT,0) AS SUB_TOTAL,
			 PARt.BARCODE_NUMBER,
			 PARLOT.CODE AS LOT_NUMBER,
			 PARLOT.BARCODE AS LOT_BARCODE,
			 switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')) AS EXPIRY_DATE,
			 DET.INVPARLOT_ID,
			 DET.DISCOUNT,
			 DET.WARSTOLOC_ID,
			 STOLOC.RACK,
			 STOLOC.SHELF,
			 STOLOC.BIN_NUMBER,
			 SODET.QUANTITY AS SELEORDER_QUANTITY,
			 CASE WHEN PL.APPROVED_DATE IS NULL THEN
				(SODET.QUANTITY - (DBO.[PKG_INVENTORY.PRC_GET_PICK_ORDER_QTY](SODET.SALEORD_ID,DET.PAR_ID,DET.INVPARLOT_ID,DET.WAR_ID)) + DET.QUANTITY)
			 ELSE
				SODET.QUANTITY - DBO.[PKG_INVENTORY.PRC_GET_PICK_ORDER_QTY](SODET.SALEORD_ID,DET.PAR_ID,DET.INVPARLOT_ID,DET.WAR_ID)
			 END AS BO_QUANTITY,
			 DET.WAR_ID ,
			 ISNULL(WAR.CODE, '') + ' - ' + ISNULL(WAR.DESCRIPTION, '') AS INVENTORY
        FROM INV_INVENTORY_PICK_ORDER_DETAILS_WV DET
        LEFT JOIN INV_PARTS_WV PART
          ON DET.PAR_ID = PART.PAR_ID
		LEFT JOIN INV_PARTS_LOT_DETAILS_WV PARLOT
		  ON PARLOT.INVPARLOT_ID = DET.INVPARLOT_ID
       INNER JOIN INV_INVENTORY_PICK_ORDERS_WV PL
          ON PL.PICKORD_ID = DET.PICKORD_ID
        LEFT JOIN INV_WAREHOUSES_WV WAR
          ON WAR.WAR_ID = DET.WAR_ID
		LEFT JOIN INV_WAREHOUSE_STOCK_LOC_WV STOLOC
		  ON STOLOC.WARSTOLOC_ID = DET.WARSTOLOC_ID
		LEFT JOIN INV_INVENTORY_SALE_ORDER_DETAILS_WV SODET
		ON SODET.SALEORDDET_ID = DET.SALEORDDET_ID
       WHERE DET.PICKORD_ID = @PI_PICKORD_ID
       ORDER BY part.code asc,parlot.EXPIRY_DATE asc, stoloc.SEQ_NUMBER asc

             



      END TRY

      BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

ALTER PROCEDURE [dbo].[PKG_INVENTORY.PRC_POST_PICK_ORDER]

	 @PI_PICKORD_ID  float = NULL,
	 @PI_PICKORD_DATE  datetimeoffset = NULL,
	 @PI_WAR_ID		FLOAT = NULL,
	 @PI_USE_ID_ASSIGNED_TO  float = NULL,
	 @PI_REFERENCE_NUMBER  varchar(MAX) = NULL,
	 @PI_CUS_ID  FLOAT = NULL,
	 @PI_SALEORD_ID		FLOAT = NULL,
	 @PI_DISPATCH_NOTES  VARCHAR(MAX) = NULL,
	 @PI_INTERNAL_NOTES  VARCHAR(MAX) = NULL,
	 @PI_CUSTOMER_REPORT_NOTES  VARCHAR(MAX) = NULL,
	 @PI_TERMS_CONDITION  VARCHAR(MAX) = NULL,
	 @PI_FINALIZED_FLAG VARCHAR(1) = NULL,
	 @PI_VOID_FLAG VARCHAR(1) = NULL,
	 @PI_VOID_NOTES  varchar(MAX) = NULL,
	 @PI_APPROVED_FLAG VARCHAR(1) = NULL,
	 @PI_COMPLETED_FLAG VARCHAR(1) = NULL,
	 @PI_MANIFEST_NUMBER varchar(MAX) = NULL,
	 @PI_PACKAGE_ID varchar(MAX) = NULL,
	 @PI_PACKAGE_ID_AND_LINK varchar(MAX) = NULL,
	 @PI_ESTIMATED_CHARGES FLOAT(53)=NULL,
	 @PI_SHIPPING_SUCCEED varchar(1) = NULL,
	 @PI_ICS_SHIPPING_USED_FLAG varchar(1)=NULL,
     @PO_MSG varchar(max) =NULL OUTPUT,
	 @PO_DETAIL int  =NULL OUTPUT,
	 @PO_PICKORD_ID int  =NULL OUTPUT

AS 
   BEGIN

      DECLARE
         @V_CHECK float(53), 
         @V_PL_NUMBER varchar(100), 
         @V_PICKORD_ID float(53), 
         @V_USERNAME varchar(100), 
         @V_PLID float(53), 
         @V_PREFIXs varchar(50), 
         @V_SIZE float(53), 
         @V_NEXT_VAL float(53), 
         @V_PLNUMBER varchar(100), 
         @AUX_NEW_MESSAGE varchar(1000),
		 @V_PICKORD_DATE DATETIMEOFFSET,
         @V_VOID_DATE DATETIMEOFFSET, 
         @V_FINAL_DATE DATETIMEOFFSET,
		 @V_APPROVED_DATE DATETIMEOFFSET,
		 @V_COMPLETE_DATE DATETIMEOFFSET,
		 @V_LOGIN_USE_ID	FLOAT,
		 @V_OLD_WAR_ID		FLOAT,
		 @V_USE_ID_APPROVED_BY	float,
		 @V_USE_ID_COMPLETED_BY	FLOAT
		 

      BEGIN TRY

 
		IF @PI_PICKORD_ID IS NOT NULL
		SELECT 
		@V_FINAL_DATE = CASE WHEN ISNULL(@PI_FINALIZED_FLAG,'N') = 'Y' THEN
            ISNULL(NULL ,SYSDATETIMEOFFSET())    ELSE  NULL END,
		@V_VOID_DATE =  CASE WHEN  ISNULL(@PI_VOID_FLAG,'N') = 'Y'	   THEN 
			ISNULL(NULL , SYSDATETIMEOFFSET())			ELSE  NULL END,
		@V_APPROVED_DATE =  CASE WHEN ISNULL(@PI_APPROVED_FLAG,'N') = 'Y' THEN 
            ISNULL( NULL,SYSDATETIMEOFFSET())		ELSE  NULL    END,
		@V_USE_ID_APPROVED_BY =  CASE WHEN  ISNULL(@PI_APPROVED_FLAG,'N') = 'Y'	   THEN 
			ISNULL(NULL , dbo.get_context_value('USER_USE_ID')) ELSE  NULL END,
        @V_COMPLETE_DATE = CASE WHEN  ISNULL(@PI_COMPLETED_FLAG ,'N')= 'Y' THEN
             ISNULL(NULL,SYSDATETIMEOFFSET())		ELSE NULL END,
		@V_USE_ID_COMPLETED_BY =  CASE WHEN  ISNULL(@PI_COMPLETED_FLAG,'N') = 'Y'	   THEN 
			ISNULL(NULL , dbo.get_context_value('USER_USE_ID')) ELSE  NULL END

		
        


         IF @PI_USE_ID_ASSIGNED_TO IS NULL
            SET @V_USERNAME = 'INVALID USER'
         ELSE 
            SELECT @V_USERNAME = USERS.USERNAME
            FROM  YM_USERS_WV  AS USERS
            WHERE USERS.USE_ID = @PI_USE_ID_ASSIGNED_TO

		SELECT @V_LOGIN_USE_ID = [dbo].[get_context_value_TEST] ('USER_USE_ID')

         IF @PI_PICKORD_ID IS NULL
            BEGIN

               
               SELECT @V_PREFIXs = SSMAROWNUM.SEQ_PREFIX, @V_SIZE = SSMAROWNUM.SEQ_SIZE
               FROM 
                  (
                     SELECT SEQ_PREFIX, SEQ_SIZE, CODE, ROW_NUMBER() OVER(
                        ORDER BY SSMAPSEUDOCOLUMN) AS ROWNUM
                     FROM 
                        (
                           SELECT SQ.SEQ_PREFIX, SQ.SEQ_SIZE, SQ.CODE, 0 AS SSMAPSEUDOCOLUMN
                           FROM  SQ_CUSTOMER_SEQS_WV  AS SQ
                           WHERE SQ.CODE = 'PICKORD' AND 1 = 1
                        )  AS SSMAPSEUDO
                  )  AS SSMAROWNUM
               WHERE SSMAROWNUM.CODE = 'PICKORD' AND SSMAROWNUM.ROWNUM = 1

             
               SELECT @V_NEXT_VAL = NEXT VALUE FOR PICKORDNUMBERSQ
			    SELECT @V_PICKORD_ID = NEXT VALUE FOR  ORASEQ

          --   SELECT @V_RCID = NEXT VALUE FOR ORASEQ
		       EXEC  [dbo].[PKG_INVENTORY.PRC_GET_PICK_ORDNO]
			         @V_NEXT_VAL,
					 @V_PREFIXS,
					 @V_SIZE,
					 @V_PLNUMBER OUTPUT

              INSERT INV_INVENTORY_PICK_ORDERS_WV(
						[PICKORD_ID],
						[PICKORD_NUMBER],
						[PICKORD_DATE] ,
						[USE_ID_ASSIGNED_TO],
						SALEORD_ID,
						[REFERENCE_NUMBER],
						[CUS_ID] ,
						[DISPATCH_NOTES] ,
						[INTERNAL_NOTES] ,
						[CUSTOMER_REPORT_NOTES],
						[TERMS_CONDITION] ,
						WAR_ID,
						MANIFEST_NUMBER,
						PACKAGE_ID,
						PACKAGE_ID_AND_LINK,
						ESTIMATED_CHARGES,
						SHIPPING_SUCCEED,
						ICS_SHIPPING_USED_FLAG
						)
 
                  VALUES (
                     @V_PICKORD_ID, 
                     @V_PLNUMBER, 
                     sysdatetimeoffset(),
                     @PI_USE_ID_ASSIGNED_TO,
					 @PI_SALEORD_ID,
					 @PI_REFERENCE_NUMBER, 
					 @PI_CUS_ID,
					 @PI_DISPATCH_NOTES,
					 @PI_INTERNAL_NOTES,
					 @PI_CUSTOMER_REPORT_NOTES,
					 @PI_TERMS_CONDITION,
					 @PI_WAR_ID,
					 @PI_MANIFEST_NUMBER,
					 @PI_PACKAGE_ID,
					 @PI_PACKAGE_ID_AND_LINK,
					 @PI_ESTIMATED_CHARGES,
					 @PI_SHIPPING_SUCCEED,
					 @PI_ICS_SHIPPING_USED_FLAG
					  )

               
               SET @PO_DETAIL = @V_PLID

               SET @AUX_NEW_MESSAGE = 'Pick order Created'


		 --- AUDIT LOG INSERTION
			EXEC   [PKG_INVENTORY.LOG_APPLICATION_ERROR] 'INV_INVENTORY_PICK_ORDERS_WV',@V_PICKORD_ID,@AUX_NEW_MESSAGE,30,@PI_USE_ID_ASSIGNED_TO,NULL
			SET @PO_MSG = 'T'
			set @PO_PICKORD_ID = @V_PICKORD_ID    
            END
         ELSE 
            BEGIN

			------
			SELECT @V_OLD_WAR_ID = WAR_iD 
			FROM INV_INVENTORY_PICK_ORDERS_WV
			WHERE PICKORD_ID = @PI_PICKORD_ID

				 SELECT 
				@V_PICKORD_DATE = ISNULL(PICKORD_DATE,SYSDATETIMEOFFSET()),
				
				@V_FINAL_DATE = CASE WHEN ISNULL(@PI_FINALIZED_FLAG,'N') = 'Y' THEN
					ISNULL(FINALIZED_DATE ,SYSDATETIMEOFFSET())    ELSE  NULL END,
				@V_VOID_DATE =  CASE WHEN  ISNULL(@PI_VOID_FLAG,'N') = 'Y'	   THEN 
					ISNULL(VOID_DATE , SYSDATETIMEOFFSET())			ELSE  NULL END,
				@V_APPROVED_DATE =  CASE WHEN ISNULL(@PI_APPROVED_FLAG,'N') = 'Y' THEN 
					ISNULL( APPROVED_DATE,SYSDATETIMEOFFSET())		ELSE  NULL    END,
				@V_USE_ID_APPROVED_BY =  CASE WHEN  ISNULL(@PI_APPROVED_FLAG,'N') = 'Y'	   THEN 
					ISNULL(USE_ID_APPROVED_BY , dbo.get_context_value('USER_USE_ID')) ELSE  NULL END,
				@V_COMPLETE_DATE = CASE WHEN  ISNULL(@PI_COMPLETED_FLAG ,'N')= 'Y' THEN
					 ISNULL(COMPLETED_DATE,SYSDATETIMEOFFSET())		ELSE NULL END,
				@V_USE_ID_COMPLETED_BY =  CASE WHEN  ISNULL(@PI_COMPLETED_FLAG,'N') = 'Y'	   THEN 
					ISNULL(USE_ID_COMPLETED_BY , dbo.get_context_value('USER_USE_ID')) ELSE  NULL END

				 FROM INV_INVENTORY_PICK_ORDERS_WV
				 WHERE PICKORD_ID = @PI_PICKORD_ID;
        
			
            
			    UPDATE  INV_INVENTORY_PICK_ORDERS_WV
                  SET 
						[PICKORD_DATE] = @V_PICKORD_DATE,
					--	[USE_ID_ASSIGNED_TO] ,
					--	[CHANNEL_ID]	=	@PI_CHANNEL_ID ,
						[REFERENCE_NUMBER]	=	 @PI_REFERENCE_NUMBER,
						[CUS_ID]	=	@PI_CUS_ID,
						[DISPATCH_NOTES]	=	@PI_DISPATCH_NOTES,
						[INTERNAL_NOTES]	=	@PI_INTERNAL_NOTES ,
						[CUSTOMER_REPORT_NOTES]		=	@PI_CUSTOMER_REPORT_NOTES,
						[TERMS_CONDITION]	=	@PI_TERMS_CONDITION,
						 VOID_DATE = @V_VOID_DATE, 
						VOID_NOTES = @PI_VOID_NOTES,
						WAR_ID		=	@PI_WAR_ID,
						APPROVED_DATE	= @V_APPROVED_DATE,
						COMPLETED_DATE	= @V_COMPLETE_DATE,
						FINALIZED_DATE = @V_FINAL_DATE,
						USE_ID_APPROVED_BY = @V_USE_ID_APPROVED_BY,
						USE_ID_COMPLETED_BY = @V_USE_ID_COMPLETED_BY,
						MANIFEST_NUMBER=@PI_MANIFEST_NUMBER,
						PACKAGE_ID=@PI_PACKAGE_ID,
						PACKAGE_ID_AND_LINK=@PI_PACKAGE_ID_AND_LINK,
						ESTIMATED_CHARGES=@PI_ESTIMATED_CHARGES,
						SHIPPING_SUCCEED=@PI_SHIPPING_SUCCEED
						 WHERE INV_INVENTORY_PICK_ORDERS_WV.PICKORD_ID = @PI_PICKORD_ID
 			/*
				  -------AUDIT TABLE TRANSFER 
			   IF @V_OLD_WAR_ID <> @PI_WAR_ID
			    EXEC [dbo].[PKG_INVENTORY.PRC_POST_SALE_ORD_WAR_CHANGE]    
					   @PI_PICKORD_ID ,
					   @V_OLD_WAR_ID,
					   @PI_WAR_ID,
					   @PI_USE_ID_ASSIGNED_TO,
					   'N'
					  
					  
			   IF @PI_VOID_FLAG = 'Y'
			   EXEC [dbo].[PKG_INVENTORY.PRC_POST_SALE_ORD_WAR_CHANGE]    
					   @PI_PICKORD_ID ,
					   @V_OLD_WAR_ID,
					   @PI_WAR_ID,
					   @PI_USE_ID_ASSIGNED_TO,
					   'Y'
			*/


               SET @PO_MSG = 'T'

               SET @PO_DETAIL = @PI_PICKORD_ID
			   set @PO_PICKORD_ID = @PI_PICKORD_ID    
            END

       

      END TRY
       BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

ALTER PROCEDURE [dbo].[PKG_ADMINISTRATION.PRC_GET_ADMIN_ACCESS]  
				   --@PI_ADMIN_USERNAME varchar(53) = NULL,
				   @PI_ADMIN_PASSWORD varchar(53) = NULL,
				   @PO_ALLOW_ADMIN_OVERRIDE varchar(max) output

AS 
    
   BEGIN

      BEGIN TRY
					
					DECLARE @V_COUNT FLOAT = 0
					
					IF @PI_ADMIN_PASSWORD IS NOT NULL

					  BEGIN
                           
						   
							select @V_COUNT = COUNT(USR.USE_ID)
							from YM_USERS_WV USR
							LEFT JOIN ADM_SYSTEM_ROLES_WV SYSROLE
							ON SYSROLE.SYSROL_ID = USR.SYSROL_ID
							WHERE SYSROLE.CODE = 'SUPER_ADMIN'
							AND USR.PASSWORD = @PI_ADMIN_PASSWORD


						IF @V_COUNT > 0 
							SET  @PO_ALLOW_ADMIN_OVERRIDE = 'Y'
						ELSE
							SET @PO_ALLOW_ADMIN_OVERRIDE = 'N'


						 END
					  ELSE   
					       set @PO_ALLOW_ADMIN_OVERRIDE='N';

					select @PO_ALLOW_ADMIN_OVERRIDE as 'ALLOW_ADMIN_OVERRIDE';
					   

      END TRY

      BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

ALTER  PROCEDURE [dbo].[PKG_ADMINISTRATION.PRC_GET_PARTS_LIST_PDF_REPORT]  
    
   @PI_ORDER varchar(max) = NULL,
   @PI_ACTIVE_FLAG varchar(max)= NULL,
   @PI_WAR_ID FLOAT(53) = NULL,
   @PI_DUPLICATE_PARTS_FLAG VARCHAR(1) = NULL,
   @PI_PAR_ID FLOAT(53) = NULL,
   @PI_OH_QTY_FROM FLOAT(53) = NULL,
   @PI_OH_QTY_TO FLOAT(53) = NULL,
   @PI_VEN_ID FLOAT(53) = NULL,
      @PI_EXPIRY_DATE_FROM DATE = NULL,--'2023-10-31',
   @PI_EXPIRY_DATE_TO DATE = NULL,-- '2025-09-30'
   @PI_PROMO_FLAG VARCHAR(1) = NULL,
   @PI_EXPIRY_IN_DAYS FLOAT = NULL,
   @PI_NON_STOCK_ITEM_FLAG VARCHAR(1) = NULL,
   @PI_BOLTON_ITEM_FLAG varchar(1)=NULL,
   @PI_INCLUDE_BOLTON_ITEM_FOR_DASHBOARD VARCHAR(1) = NULL,
   @PO_PARTS_LIST varchar(8000)  OUTPUT
AS  
   BEGIN

      DECLARE
         @V_SEARCH varchar(500)

      BEGIN TRY

         SET @PO_PARTS_LIST = NULL

		 --set bolton flag N
		 IF @PI_BOLTON_ITEM_FLAG IS NULL
			BEGIN
				SET @PI_BOLTON_ITEM_FLAG='N'
			END
		
		IF ISNULL(@PI_INCLUDE_BOLTON_ITEM_FOR_DASHBOARD,'N')='N'
			BEGIN

		IF ISNULL(@PI_NON_STOCK_ITEM_FLAG,'N') = 'N'
			BEGIN

					IF @PI_PROMO_FLAG = 'Y'
						BEGIN
		
						  SELECT 
							 PART.PAR_ID, 
							 ISNULL(PART.CODE,' ') AS PAR_CODE, 
							 PART.BARCODE_NUMBER,
							 ISNULL(PART.DESCRIPTION,' ') AS DESCRIPTION, 
							 ISNULL(PART.ACTIVE_FLAG,'N') AS ACTIVE_FLAG, 
							 ISNULL(PART.STANDARD_COST,0) AS STANDARD_COST, 
							 ISNULL(PART.PRICE,0) AS PRICE,
							 ISNULL(PART.NAME,' ') AS NAME,
							 ISNULL(VENDOR.CODE, '') + ',' + ISNULL(VENDOR.DESCRIPTION, '') AS SUPPLIER, 

						   (select WAR.CODE + ' - ' + WAR.DESCRIPTION from INV_WAREHOUSES_WV WAR WHERE WAR.WAR_ID = @PI_WAR_ID) AS WAREHOUSE,
							CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
							ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0)
							ELSE
								0
							END AS OH_QUANTITY,
					 CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
			
					  (ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOC_AVL] (STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0))
					 ELSE
						0
					 END  AS QTY_AVAILABLE,
							PART.DUPLICATE_PART_CREATED_FLAG,
							PART.CHILD_PART_FLAG,
							CASE
								WHEN PART.CHILD_PART_FLAG = 'Y' THEN 'DUPLICATE'
								ELSE 'SIMPLE'
								END AS PART_TYPE,

							CASE
								WHEN PART.ACTIVE_FLAG = 'Y' THEN 'ACTIVE'
								ELSE 'INACTIVE'
								END AS STATUS,
								PARLOT.INVPARLOT_ID,
							PARLOT.CODE AS LOT_NUMBER,
							ISNULL(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101),' ')  AS EXPIRY_DATE,
							ISNULL(CAST(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime),'')  AS EXPIRY_DATE_CHECK,

							datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate()) AS EXPIRY_IN_DAYS,
							--ISNULL(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101),' ')  AS EXPIRY_DATE,

							 CASE 
							WHEN PARLOT.INVPARLOT_ID  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'PURCHASE_GROUP')
 						   ELSE	NULL
						  END AS PURCHASE_GROUP,
						  CASE 
							WHEN PARLOT.EXPIRY_DATE  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'COLOR')
						   ELSE  NULL
						  END AS PURCHASE_COLOR,
						  'S' + WARSTOLOC.RACK + 'R' + WARSTOLOC.SHELF + 'B' + WARSTOLOC.BIN_NUMBER AS LOCATION

						  FROM 
							 INV_PARTS_WV  AS PART 
								LEFT JOIN REP_VENDORS_WV  AS VENDOR 
								ON PART.VEN_ID = VENDOR.VEN_ID
								LEFT JOIN INV_PARTS_LOT_DETAILS_WV PARLOT
								ON PART.PAR_ID = PARLOT.PAR_ID
								LEFT JOIN INV_WAREHOUSE_STOCKS_WV STOCK
								ON STOCK.INVPARLOT_ID = PARLOT.INVPARLOT_ID
								LEFT JOIN INV_WAREHOUSE_STOCK_LOC_WV WARSTOLOC
								ON WARSTOLOC.WARSTOLOC_ID = STOCK.WARSTOLOC_ID
						  WHERE  
								STOCK.WAR_ID = @PI_WAR_ID
								AND
								(WARSTOLOC.RACK <> 'TEMP' AND WARSTOLOC.SHELF <> 'TEMP' AND WARSTOLOC.BIN_NUMBER <> 'TEMP')

								------STOCK_ITEM_FLAG
								AND 
								  (
							(  @PI_NON_STOCK_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.NON_STOCK_ITEM_FLAG = @PI_NON_STOCK_ITEM_FLAG AND @PI_NON_STOCK_ITEM_FLAG IS NOT NULL)
						  )
								AND

						  -------------------ACTIVE_FLAG
						  (
							(  @PI_ACTIVE_FLAG IS NULL ) 
									   OR
							(  PART.ACTIVE_FLAG = @PI_ACTIVE_FLAG AND @PI_ACTIVE_FLAG IS NOT NULL)
						  )

						  ------------------DUPLICATE SKU
						  AND
						   (
							(  @PI_DUPLICATE_PARTS_FLAG IS NULL  ) 
									   OR
							(  PART.CHILD_PART_FLAG = @PI_DUPLICATE_PARTS_FLAG AND @PI_DUPLICATE_PARTS_FLAG IS NOT NULL AND @PI_DUPLICATE_PARTS_FLAG ='Y')
						  )

						  ------------------SKU (PAR_ID)
						  AND
						   (
							(  @PI_PAR_ID IS NULL ) 
									   OR
							(  PART.PAR_ID = @PI_PAR_ID AND @PI_PAR_ID IS NOT NULL)
						  )

						 -- -------------------ONHAND_QTY (FROM & TO)
							--AND
						 --  (
							--(  @PI_OH_QTY_FROM IS NULL OR @PI_OH_QTY_TO IS NULL ) 
							--		   OR
							--(  (ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) >= @PI_OH_QTY_FROM )
							--	AND
							--	 (ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) <= @PI_OH_QTY_TO)
							--	AND @PI_OH_QTY_FROM IS NOT NULL AND @PI_OH_QTY_TO IS NOT NULL)
						 -- )

						  -------------------ONHAND_QTY (FROM)
						   AND
						   (
							(  @PI_OH_QTY_FROM IS NULL ) 
									   OR
							(  ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) >= @PI_OH_QTY_FROM 
								AND @PI_OH_QTY_FROM IS NOT NULL)
						  )

						    -------------------ONHAND_QTY (TO)
						   AND
						   (
							(  @PI_OH_QTY_TO IS NULL ) 
									   OR
							(  ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) <= @PI_OH_QTY_TO
							   AND @PI_OH_QTY_TO IS NOT NULL)
						  )

						   ------------------Supplier (VEN_ID)
						  AND
						   (
							(  @PI_VEN_ID IS NULL ) 
									   OR
							(  PART.VEN_ID = @PI_VEN_ID AND @PI_VEN_ID IS NOT NULL)
						  )

							 -------------------Expiry Date (FROM & TO)
							AND
						   (
							(  @PI_EXPIRY_DATE_FROM IS NULL OR @PI_EXPIRY_DATE_TO IS NULL ) 
									   OR
							(  (ISNULL(cast(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101)as date),' ') >= @PI_EXPIRY_DATE_FROM )
								AND
								 (ISNULL(cast(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101)as date),' ') <= @PI_EXPIRY_DATE_TO)
								AND @PI_EXPIRY_DATE_FROM IS NOT NULL AND @PI_EXPIRY_DATE_TO IS NOT NULL)
						  )
				  
						 -- AND
							--(
							--    datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate()) AS EXPIRY_IN_DAYS,

							--)
							--EXPIRY IN DAYS
							  AND
						   (
							(  @PI_EXPIRY_IN_DAYS IS NULL ) 
									   OR
							(  (datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate())) 
								<= @PI_EXPIRY_IN_DAYS
								AND
								(datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate())) 
								> 0
								AND @PI_EXPIRY_IN_DAYS IS NOT NULL)
						  )

						  AND PART.PAR_ID in (SELECT DISTINCT PAR_ID FROM ADM_PROMOTIONS_WV WHERE ACTIVE_FLAG='Y')

						  AND --must  
							WARSTOLOC.WARSTOLOC_iD <> ( SELECT ISNULL(WARSTOLOC_iD,0) FROM INV_WAREHOUSE_STOCK_LOC_WV WHERE    RACK = 'TEMP' )
									
						  AND --must
							[dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null) > 0
									
							 ------------------Bolton Flag
						  AND
						   (
							(  @PI_BOLTON_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.BOLTON_FLAG = @PI_BOLTON_ITEM_FLAG AND @PI_BOLTON_ITEM_FLAG IS NOT NULL)
						  )

						  ORDER BY 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_ID ASC' THEN PART.PAR_ID
								END ASC, 
                     
								CASE 
								   WHEN isnull(@PI_ORDER, 'PAR_ID DESC') = 'PAR_ID DESC' THEN PART.PAR_ID
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_CODE ASC' THEN upper(PART.CODE)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_CODE DESC' THEN upper(PART.CODE)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'DESCRIPTION ASC' THEN upper(PART.DESCRIPTION)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'DESCRIPTION DESC' THEN upper(PART.DESCRIPTION)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'BARCODE_NUMBER ASC' THEN upper(PART.BARCODE_NUMBER)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'BARCODE_NUMBER DESC' THEN upper(PART.BARCODE_NUMBER)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PRICE ASC' THEN PART.PRICE
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PRICE DESC' THEN PART.PRICE
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'STANDARD_COST ASC' THEN PART.STANDARD_COST
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'STANDARD_COST DESC' THEN PART.STANDARD_COST
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'WARRANTY ASC' THEN PART.WARRANTY
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'WARRANTY DESC' THEN PART.WARRANTY
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SUPPLIER ASC' THEN upper(VENDOR.DESCRIPTION)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SUPPLIER DESC' THEN upper(VENDOR.DESCRIPTION)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'TCL_PART ASC' THEN upper(PART.REFERENCE_NUMBER)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'TCL_PART DESC' THEN upper(PART.REFERENCE_NUMBER)
								END DESC,
								 CASE 
								   WHEN @PI_ORDER = 'SKU_MANUFACTURE ASC' THEN upper(PART.SKU_MANUFACTURE)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SKU_MANUFACTURE DESC' THEN upper(PART.SKU_MANUFACTURE)
								END DESC,
								 CASE 
								   WHEN @PI_ORDER = 'NAME ASC' THEN upper(PART.NAME)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'NAME DESC' THEN upper(PART.NAME)
								END DESC
						
					

						END

					ELSE
						BEGIN

						  SELECT 
							 PART.PAR_ID, 
							 ISNULL(PART.CODE,' ') AS PAR_CODE, 
							 PART.BARCODE_NUMBER,
							 ISNULL(PART.DESCRIPTION,' ') AS DESCRIPTION, 
							 ISNULL(PART.ACTIVE_FLAG,'N') AS ACTIVE_FLAG, 
							 ISNULL(PART.STANDARD_COST,0) AS STANDARD_COST, 
							 ISNULL(PART.PRICE,0) AS PRICE,
							 ISNULL(PART.NAME,' ') AS NAME,
							 ISNULL(VENDOR.CODE, '') + ',' + ISNULL(VENDOR.DESCRIPTION, '') AS SUPPLIER, 

						   (select WAR.CODE + ' - ' + WAR.DESCRIPTION from INV_WAREHOUSES_WV WAR WHERE WAR.WAR_ID = @PI_WAR_ID) AS WAREHOUSE,

						   CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
							ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0)
							ELSE
								0
							END AS OH_QUANTITY,
					 CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
			
					  (ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOC_AVL] (STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0))
					 ELSE
						0
					 END  AS QTY_AVAILABLE,
							PART.DUPLICATE_PART_CREATED_FLAG,
							PART.CHILD_PART_FLAG,
							CASE
								WHEN PART.CHILD_PART_FLAG = 'Y' THEN 'DUPLICATE'
								ELSE 'SIMPLE'
								END AS PART_TYPE,

							CASE
								WHEN PART.ACTIVE_FLAG = 'Y' THEN 'ACTIVE'
								ELSE 'INACTIVE'
								END AS STATUS,
								PARLOT.INVPARLOT_ID,
							PARLOT.CODE AS LOT_NUMBER,
							ISNULL(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101),' ')  AS EXPIRY_DATE,
							ISNULL(CAST(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime),'')  AS EXPIRY_DATE_CHECK,
							datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate()) AS EXPIRY_IN_DAYS,
							 CASE 
							WHEN PARLOT.INVPARLOT_ID  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'PURCHASE_GROUP')
 						   ELSE	NULL
						  END AS PURCHASE_GROUP,
						  CASE 
							WHEN PARLOT.EXPIRY_DATE  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'COLOR')
						   ELSE  NULL
						  END AS PURCHASE_COLOR,
						   'S' + WARSTOLOC.RACK + 'R' + WARSTOLOC.SHELF + 'B' + WARSTOLOC.BIN_NUMBER AS LOCATION

						  FROM 
							 INV_PARTS_WV  AS PART 
								LEFT JOIN REP_VENDORS_WV  AS VENDOR 
								ON PART.VEN_ID = VENDOR.VEN_ID
								LEFT JOIN INV_PARTS_LOT_DETAILS_WV PARLOT
								ON PART.PAR_ID = PARLOT.PAR_ID
								LEFT JOIN INV_WAREHOUSE_STOCKS_WV STOCK
								ON STOCK.INVPARLOT_ID = PARLOT.INVPARLOT_ID
								LEFT JOIN INV_WAREHOUSE_STOCK_LOC_WV WARSTOLOC
								ON WARSTOLOC.WARSTOLOC_ID = STOCK.WARSTOLOC_ID
						  WHERE  
								STOCK.WAR_ID = @PI_WAR_ID
								AND
								(WARSTOLOC.RACK <> 'TEMP' AND WARSTOLOC.SHELF <> 'TEMP' AND WARSTOLOC.BIN_NUMBER <> 'TEMP')
									------STOCK_ITEM_FLAG
								AND 
								  (
							(  @PI_NON_STOCK_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.NON_STOCK_ITEM_FLAG = @PI_NON_STOCK_ITEM_FLAG AND @PI_NON_STOCK_ITEM_FLAG IS NOT NULL)
						  )
								AND
						  -------------------ACTIVE_FLAG
						  (
							(  @PI_ACTIVE_FLAG IS NULL ) 
									   OR
							(  PART.ACTIVE_FLAG = @PI_ACTIVE_FLAG AND @PI_ACTIVE_FLAG IS NOT NULL)
						  )

						  ------------------DUPLICATE SKU
						  AND
						   (
							(  @PI_DUPLICATE_PARTS_FLAG IS NULL  ) 
									   OR
							(  PART.CHILD_PART_FLAG = @PI_DUPLICATE_PARTS_FLAG AND @PI_DUPLICATE_PARTS_FLAG IS NOT NULL AND @PI_DUPLICATE_PARTS_FLAG ='Y')
						  )

						  ------------------SKU (PAR_ID)
						  AND
						   (
							(  @PI_PAR_ID IS NULL ) 
									   OR
							(  PART.PAR_ID = @PI_PAR_ID AND @PI_PAR_ID IS NOT NULL)
						  )

						   -- -------------------ONHAND_QTY (FROM & TO)
							--AND
						 --  (
							--(  @PI_OH_QTY_FROM IS NULL OR @PI_OH_QTY_TO IS NULL ) 
							--		   OR
							--(  (ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) >= @PI_OH_QTY_FROM )
							--	AND
							--	 (ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) <= @PI_OH_QTY_TO)
							--	AND @PI_OH_QTY_FROM IS NOT NULL AND @PI_OH_QTY_TO IS NOT NULL)
						 -- )

						  -------------------ONHAND_QTY (FROM)
						   AND
						   (
							(  @PI_OH_QTY_FROM IS NULL ) 
									   OR
							(  ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) >= @PI_OH_QTY_FROM 
								AND @PI_OH_QTY_FROM IS NOT NULL)
						  )

						    -------------------ONHAND_QTY (TO)
						   AND
						   (
							(  @PI_OH_QTY_TO IS NULL ) 
									   OR
							(  ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0) <= @PI_OH_QTY_TO
							   AND @PI_OH_QTY_TO IS NOT NULL)
						  )


						   ------------------Supplier (VEN_ID)
						  AND
						   (
							(  @PI_VEN_ID IS NULL ) 
									   OR
							(  PART.VEN_ID = @PI_VEN_ID AND @PI_VEN_ID IS NOT NULL)
						  )

							 -------------------Expiry Date (FROM & TO)
							AND
						   (
							(  @PI_EXPIRY_DATE_FROM IS NULL OR @PI_EXPIRY_DATE_TO IS NULL ) 
									   OR
							(  (ISNULL(cast(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101)as date),' ') >= @PI_EXPIRY_DATE_FROM )
								AND
								 (ISNULL(cast(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101)as date),' ') <= @PI_EXPIRY_DATE_TO)
								AND @PI_EXPIRY_DATE_FROM IS NOT NULL AND @PI_EXPIRY_DATE_TO IS NOT NULL)
						  )
						 --EXPIRY IN DAYS
							  AND
						   (
							(  @PI_EXPIRY_IN_DAYS IS NULL ) 
									   OR
							(  (datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate())) 
								<= @PI_EXPIRY_IN_DAYS
								AND
								(datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate())) 
								> 0
								AND @PI_EXPIRY_IN_DAYS IS NOT NULL)
						  )
						  AND --must  
							WARSTOLOC.WARSTOLOC_iD <> ( SELECT ISNULL(WARSTOLOC_iD,0) FROM INV_WAREHOUSE_STOCK_LOC_WV WHERE    RACK = 'TEMP' )
									
						  AND --must
							[dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null) > 0
						
							 ------------------Bolton Flag
						  AND
						   (
							(  @PI_BOLTON_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.BOLTON_FLAG = @PI_BOLTON_ITEM_FLAG AND @PI_BOLTON_ITEM_FLAG IS NOT NULL)
						  )

						  ORDER BY 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_ID ASC' THEN PART.PAR_ID
								END ASC, 
                     
								CASE 
								   WHEN isnull(@PI_ORDER, 'PAR_ID DESC') = 'PAR_ID DESC' THEN PART.PAR_ID
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_CODE ASC' THEN upper(PART.CODE)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_CODE DESC' THEN upper(PART.CODE)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'DESCRIPTION ASC' THEN upper(PART.DESCRIPTION)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'DESCRIPTION DESC' THEN upper(PART.DESCRIPTION)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'BARCODE_NUMBER ASC' THEN upper(PART.BARCODE_NUMBER)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'BARCODE_NUMBER DESC' THEN upper(PART.BARCODE_NUMBER)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PRICE ASC' THEN PART.PRICE
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PRICE DESC' THEN PART.PRICE
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'STANDARD_COST ASC' THEN PART.STANDARD_COST
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'STANDARD_COST DESC' THEN PART.STANDARD_COST
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'WARRANTY ASC' THEN PART.WARRANTY
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'WARRANTY DESC' THEN PART.WARRANTY
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SUPPLIER ASC' THEN upper(VENDOR.DESCRIPTION)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SUPPLIER DESC' THEN upper(VENDOR.DESCRIPTION)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'TCL_PART ASC' THEN upper(PART.REFERENCE_NUMBER)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'TCL_PART DESC' THEN upper(PART.REFERENCE_NUMBER)
								END DESC,
								 CASE 
								   WHEN @PI_ORDER = 'SKU_MANUFACTURE ASC' THEN upper(PART.SKU_MANUFACTURE)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SKU_MANUFACTURE DESC' THEN upper(PART.SKU_MANUFACTURE)
								END DESC,
								 CASE 
								   WHEN @PI_ORDER = 'NAME ASC' THEN upper(PART.NAME)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'NAME DESC' THEN upper(PART.NAME)
								END DESC
					
						END

			 END

			 ELSE IF @PI_NON_STOCK_ITEM_FLAG = 'Y'
			BEGIN

						  SELECT 
							 PART.PAR_ID, 
							 ISNULL(PART.CODE,' ') AS PAR_CODE, 
							 PART.BARCODE_NUMBER,
							 ISNULL(PART.DESCRIPTION,' ') AS DESCRIPTION, 
							 ISNULL(PART.ACTIVE_FLAG,'N') AS ACTIVE_FLAG, 
							 ISNULL(PART.STANDARD_COST,0) AS STANDARD_COST, 
							 ISNULL(PART.PRICE,0) AS PRICE,
							 ISNULL(PART.NAME,' ') AS NAME,
							 ISNULL(VENDOR.CODE, '') + ',' + ISNULL(VENDOR.DESCRIPTION, '') AS SUPPLIER, 

						   (select WAR.CODE + ' - ' + WAR.DESCRIPTION from INV_WAREHOUSES_WV WAR WHERE WAR.WAR_ID = @PI_WAR_ID) AS WAREHOUSE,
							CASE WHEN STOCK.WARSTOLOC_ID IS NOT NULL THEN
							ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND_NON_STOCK](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.WARSTOLOC_ID,null),0)
							ELSE
								0
							END AS OH_QUANTITY,
					 CASE WHEN STOCK.WARSTOLOC_ID IS NOT NULL THEN
			
					  (ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOC_AVL_NON_STOCK] (STOCK.PAR_ID, STOCK.WAR_ID,STOCK.WARSTOLOC_ID,null),0))
					 ELSE
						0
					 END  AS QTY_AVAILABLE,
							PART.DUPLICATE_PART_CREATED_FLAG,
							PART.CHILD_PART_FLAG,
							CASE
								WHEN PART.CHILD_PART_FLAG = 'Y' THEN 'DUPLICATE'
								ELSE 'SIMPLE'
								END AS PART_TYPE,

							CASE
								WHEN PART.ACTIVE_FLAG = 'Y' THEN 'ACTIVE'
								ELSE 'INACTIVE'
								END AS STATUS,
							
							 
						  'S' + WARSTOLOC.RACK + 'R' + WARSTOLOC.SHELF + 'B' + WARSTOLOC.BIN_NUMBER AS LOCATION

						  FROM 
							 INV_PARTS_WV  AS PART 
								LEFT JOIN REP_VENDORS_WV  AS VENDOR 
								ON PART.VEN_ID = VENDOR.VEN_ID
								--LEFT JOIN INV_PARTS_LOT_DETAILS_WV PARLOT
								--ON PART.PAR_ID = PARLOT.PAR_ID
								LEFT JOIN INV_WAREHOUSE_NON_STOCKS_WV STOCK
								ON STOCK.PAR_ID = PART.PAR_ID
								LEFT JOIN INV_WAREHOUSE_STOCK_LOC_WV WARSTOLOC
								ON WARSTOLOC.WARSTOLOC_ID = STOCK.WARSTOLOC_ID
						  WHERE  
								STOCK.WAR_ID = @PI_WAR_ID
								AND
								(WARSTOLOC.RACK <> 'TEMP' AND WARSTOLOC.SHELF <> 'TEMP' AND WARSTOLOC.BIN_NUMBER <> 'TEMP')

								------STOCK_ITEM_FLAG
								AND 
								  (
							(  @PI_NON_STOCK_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.NON_STOCK_ITEM_FLAG = @PI_NON_STOCK_ITEM_FLAG AND @PI_NON_STOCK_ITEM_FLAG IS NOT NULL)
						  )
								AND

						  -------------------ACTIVE_FLAG
						  (
							(  @PI_ACTIVE_FLAG IS NULL ) 
									   OR
							(  PART.ACTIVE_FLAG = @PI_ACTIVE_FLAG AND @PI_ACTIVE_FLAG IS NOT NULL)
						  )

						  ------------------DUPLICATE SKU
						  AND
						   (
							(  @PI_DUPLICATE_PARTS_FLAG IS NULL  ) 
									   OR
							(  PART.CHILD_PART_FLAG = @PI_DUPLICATE_PARTS_FLAG AND @PI_DUPLICATE_PARTS_FLAG IS NOT NULL AND @PI_DUPLICATE_PARTS_FLAG ='Y')
						  )

						  ------------------SKU (PAR_ID)
						  AND
						   (
							(  @PI_PAR_ID IS NULL ) 
									   OR
							(  PART.PAR_ID = @PI_PAR_ID AND @PI_PAR_ID IS NOT NULL)
						  )

						 -- -------------------ONHAND_QTY (FROM & TO)
							--AND
						 --  (
							--(  @PI_OH_QTY_FROM IS NULL OR @PI_OH_QTY_TO IS NULL ) 
							--		   OR
							--(  (ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND_NON_STOCK](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.WARSTOLOC_ID,null),0) >= @PI_OH_QTY_FROM )
							--	AND
							--	 (ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND_NON_STOCK](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.WARSTOLOC_ID,null),0) <= @PI_OH_QTY_TO)
							--	AND @PI_OH_QTY_FROM IS NOT NULL AND @PI_OH_QTY_TO IS NOT NULL)
						 -- )

						  -------------------ONHAND_QTY (FROM)
						   AND
						   (
							(  @PI_OH_QTY_FROM IS NULL ) 
									   OR
							(  ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND_NON_STOCK](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.WARSTOLOC_ID,null),0) >= @PI_OH_QTY_FROM 
								AND @PI_OH_QTY_FROM IS NOT NULL)
						  )

						    -------------------ONHAND_QTY (TO)
						   AND
						   (
							(  @PI_OH_QTY_TO IS NULL ) 
									   OR
							(  ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND_NON_STOCK](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.WARSTOLOC_ID,null),0) <= @PI_OH_QTY_TO
							   AND @PI_OH_QTY_TO IS NOT NULL)
						  )


						   ------------------Supplier (VEN_ID)
						  AND
						   (
							(  @PI_VEN_ID IS NULL ) 
									   OR
							(  PART.VEN_ID = @PI_VEN_ID AND @PI_VEN_ID IS NOT NULL)
						  )

						
				  
						 -- AND
							--(
							--    datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate()) AS EXPIRY_IN_DAYS,

							--)
							


						  AND --must  
							WARSTOLOC.WARSTOLOC_iD <> ( SELECT ISNULL(WARSTOLOC_iD,0) FROM INV_WAREHOUSE_STOCK_LOC_WV WHERE    RACK = 'TEMP' )
									
						  AND --must
							[dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND_NON_STOCK](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.WARSTOLOC_ID,null) > 0
							
								 ------------------Bolton Flag
						  AND
						   (
							(  @PI_BOLTON_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.BOLTON_FLAG = @PI_BOLTON_ITEM_FLAG AND @PI_BOLTON_ITEM_FLAG IS NOT NULL)
						  )

						  ORDER BY 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_ID ASC' THEN PART.PAR_ID
								END ASC, 
                     
								CASE 
								   WHEN isnull(@PI_ORDER, 'PAR_ID DESC') = 'PAR_ID DESC' THEN PART.PAR_ID
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_CODE ASC' THEN upper(PART.CODE)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PAR_CODE DESC' THEN upper(PART.CODE)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'DESCRIPTION ASC' THEN upper(PART.DESCRIPTION)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'DESCRIPTION DESC' THEN upper(PART.DESCRIPTION)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'BARCODE_NUMBER ASC' THEN upper(PART.BARCODE_NUMBER)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'BARCODE_NUMBER DESC' THEN upper(PART.BARCODE_NUMBER)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PRICE ASC' THEN PART.PRICE
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'PRICE DESC' THEN PART.PRICE
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'STANDARD_COST ASC' THEN PART.STANDARD_COST
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'STANDARD_COST DESC' THEN PART.STANDARD_COST
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'WARRANTY ASC' THEN PART.WARRANTY
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'WARRANTY DESC' THEN PART.WARRANTY
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SUPPLIER ASC' THEN upper(VENDOR.DESCRIPTION)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SUPPLIER DESC' THEN upper(VENDOR.DESCRIPTION)
								END DESC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'TCL_PART ASC' THEN upper(PART.REFERENCE_NUMBER)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'TCL_PART DESC' THEN upper(PART.REFERENCE_NUMBER)
								END DESC,
								 CASE 
								   WHEN @PI_ORDER = 'SKU_MANUFACTURE ASC' THEN upper(PART.SKU_MANUFACTURE)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'SKU_MANUFACTURE DESC' THEN upper(PART.SKU_MANUFACTURE)
								END DESC,
								 CASE 
								   WHEN @PI_ORDER = 'NAME ASC' THEN upper(PART.NAME)
								END ASC, 
                     
								CASE 
								   WHEN @PI_ORDER = 'NAME DESC' THEN upper(PART.NAME)
								END DESC

			 END

			 END

		ELSE IF @PI_INCLUDE_BOLTON_ITEM_FOR_DASHBOARD = 'Y'
			BEGIN
					SELECT 
							 PART.PAR_ID, 
							 ISNULL(PART.CODE,' ') AS PAR_CODE, 
							 PART.BARCODE_NUMBER,
							 ISNULL(PART.DESCRIPTION,' ') AS DESCRIPTION, 
							 ISNULL(PART.ACTIVE_FLAG,'N') AS ACTIVE_FLAG, 
							 ISNULL(PART.STANDARD_COST,0) AS STANDARD_COST, 
							 ISNULL(PART.PRICE,0) AS PRICE,
							 ISNULL(PART.NAME,' ') AS NAME,
							 ISNULL(VENDOR.CODE, '') + ',' + ISNULL(VENDOR.DESCRIPTION, '') AS SUPPLIER, 

						   (select WAR.CODE + ' - ' + WAR.DESCRIPTION from INV_WAREHOUSES_WV WAR WHERE WAR.WAR_ID = @PI_WAR_ID) AS WAREHOUSE,

						   CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
							ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0)
							ELSE
								0
							END AS OH_QUANTITY,
					 CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
			
					  (ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOC_AVL] (STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0))
					 ELSE
						0
					 END  AS QTY_AVAILABLE,
							PART.DUPLICATE_PART_CREATED_FLAG,
							PART.CHILD_PART_FLAG,
							CASE
								WHEN PART.CHILD_PART_FLAG = 'Y' THEN 'DUPLICATE'
								ELSE 'SIMPLE'
								END AS PART_TYPE,

							CASE
								WHEN PART.ACTIVE_FLAG = 'Y' THEN 'ACTIVE'
								ELSE 'INACTIVE'
								END AS STATUS,
								PARLOT.INVPARLOT_ID,
							PARLOT.CODE AS LOT_NUMBER,
							ISNULL(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101),' ')  AS EXPIRY_DATE,
							ISNULL(CAST(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime),'')  AS EXPIRY_DATE_CHECK,
							datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate()) AS EXPIRY_IN_DAYS,
							 CASE 
							WHEN PARLOT.INVPARLOT_ID  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'PURCHASE_GROUP')
 						   ELSE	NULL
						  END AS PURCHASE_GROUP,
						  CASE 
							WHEN PARLOT.EXPIRY_DATE  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'COLOR')
						   ELSE  NULL
						  END AS PURCHASE_COLOR,
						   'S' + WARSTOLOC.RACK + 'R' + WARSTOLOC.SHELF + 'B' + WARSTOLOC.BIN_NUMBER AS LOCATION

						  FROM 
							 INV_PARTS_WV  AS PART 
								LEFT JOIN REP_VENDORS_WV  AS VENDOR 
								ON PART.VEN_ID = VENDOR.VEN_ID
								LEFT JOIN INV_PARTS_LOT_DETAILS_WV PARLOT
								ON PART.PAR_ID = PARLOT.PAR_ID
								LEFT JOIN INV_WAREHOUSE_STOCKS_WV STOCK
								ON STOCK.INVPARLOT_ID = PARLOT.INVPARLOT_ID
								LEFT JOIN INV_WAREHOUSE_STOCK_LOC_WV WARSTOLOC
								ON WARSTOLOC.WARSTOLOC_ID = STOCK.WARSTOLOC_ID
						  WHERE  
								STOCK.WAR_ID = @PI_WAR_ID
								AND
								(WARSTOLOC.RACK <> 'TEMP' AND WARSTOLOC.SHELF <> 'TEMP' AND WARSTOLOC.BIN_NUMBER <> 'TEMP')
									------STOCK_ITEM_FLAG
								AND 
								  (
							(  @PI_NON_STOCK_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.NON_STOCK_ITEM_FLAG = @PI_NON_STOCK_ITEM_FLAG AND @PI_NON_STOCK_ITEM_FLAG IS NOT NULL)
						  )
					
								AND ISNULL(PART.BOLTON_FLAG,'N') = 'N'
						
						  AND --must  
							WARSTOLOC.WARSTOLOC_iD <> ( SELECT ISNULL(WARSTOLOC_iD,0) FROM INV_WAREHOUSE_STOCK_LOC_WV WHERE    RACK = 'TEMP' )
									
						  AND --must
							[dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null) > 0

								UNION ALL

								SELECT 
							 PART.PAR_ID, 
							 ISNULL(PART.CODE,' ') AS PAR_CODE, 
							 PART.BARCODE_NUMBER,
							 ISNULL(PART.DESCRIPTION,' ') AS DESCRIPTION, 
							 ISNULL(PART.ACTIVE_FLAG,'N') AS ACTIVE_FLAG, 
							 ISNULL(PART.STANDARD_COST,0) AS STANDARD_COST, 
							 ISNULL(PART.PRICE,0) AS PRICE,
							 ISNULL(PART.NAME,' ') AS NAME,
							 ISNULL(VENDOR.CODE, '') + ',' + ISNULL(VENDOR.DESCRIPTION, '') AS SUPPLIER, 

						   (select WAR.CODE + ' - ' + WAR.DESCRIPTION from INV_WAREHOUSES_WV WAR WHERE WAR.WAR_ID = @PI_WAR_ID) AS WAREHOUSE,

						   CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
							ISNULL( [dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0)
							ELSE
								0
							END AS OH_QUANTITY,
					 CASE WHEN STOCK.INVPARLOT_ID IS NOT NULL AND STOCK.WARSTOLOC_ID IS NOT NULL THEN
			
					  (ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOC_AVL] (STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null),0))
					 ELSE
						0
					 END  AS QTY_AVAILABLE,
							PART.DUPLICATE_PART_CREATED_FLAG,
							PART.CHILD_PART_FLAG,
							CASE
								WHEN PART.CHILD_PART_FLAG = 'Y' THEN 'DUPLICATE'
								ELSE 'SIMPLE'
								END AS PART_TYPE,

							CASE
								WHEN PART.ACTIVE_FLAG = 'Y' THEN 'ACTIVE'
								ELSE 'INACTIVE'
								END AS STATUS,
								PARLOT.INVPARLOT_ID,
							PARLOT.CODE AS LOT_NUMBER,
							ISNULL(CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101),' ')  AS EXPIRY_DATE,
							ISNULL(CAST(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime),'')  AS EXPIRY_DATE_CHECK,
							datediff(day, ISNULL(switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),SYSDATETIMEOFFSET()), getdate()) AS EXPIRY_IN_DAYS,
							 CASE 
							WHEN PARLOT.INVPARLOT_ID  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'PURCHASE_GROUP')
 						   ELSE	NULL
						  END AS PURCHASE_GROUP,
						  CASE 
							WHEN PARLOT.EXPIRY_DATE  IS NOT NULL THEN
							DBO.[PKG_INVENTORY.GET_PURCHASE_GROUP] (CAST(PARLOT.EXPIRY_DATE AS DATE), 'COLOR')
						   ELSE  NULL
						  END AS PURCHASE_COLOR,
						   'S' + WARSTOLOC.RACK + 'R' + WARSTOLOC.SHELF + 'B' + WARSTOLOC.BIN_NUMBER AS LOCATION

						  FROM 
							 INV_PARTS_WV  AS PART 
								LEFT JOIN REP_VENDORS_WV  AS VENDOR 
								ON PART.VEN_ID = VENDOR.VEN_ID
								LEFT JOIN INV_PARTS_LOT_DETAILS_WV PARLOT
								ON PART.PAR_ID = PARLOT.PAR_ID
								LEFT JOIN INV_WAREHOUSE_STOCKS_WV STOCK
								ON STOCK.INVPARLOT_ID = PARLOT.INVPARLOT_ID
								LEFT JOIN INV_WAREHOUSE_STOCK_LOC_WV WARSTOLOC
								ON WARSTOLOC.WARSTOLOC_ID = STOCK.WARSTOLOC_ID
						  WHERE  
								STOCK.WAR_ID = @PI_WAR_ID
								AND
								(WARSTOLOC.RACK <> 'TEMP' AND WARSTOLOC.SHELF <> 'TEMP' AND WARSTOLOC.BIN_NUMBER <> 'TEMP')
									------STOCK_ITEM_FLAG
								AND 
								  (
							(  @PI_NON_STOCK_ITEM_FLAG IS NULL ) 
									   OR
							(  PART.NON_STOCK_ITEM_FLAG = @PI_NON_STOCK_ITEM_FLAG AND @PI_NON_STOCK_ITEM_FLAG IS NOT NULL)
						  )
					
								AND PART.BOLTON_FLAG = 'Y'
						
						  AND --must  
							WARSTOLOC.WARSTOLOC_iD <> ( SELECT ISNULL(WARSTOLOC_iD,0) FROM INV_WAREHOUSE_STOCK_LOC_WV WHERE    RACK = 'TEMP' )
									
						  AND --must
							[dbo].[PKG_INVENTORY.PRC_GET_PART_LOC_ONHAND](STOCK.PAR_ID, STOCK.WAR_ID,STOCK.INVPARLOT_ID,STOCK.WARSTOLOC_ID,null) > 0
						
						
						  
			END
         
              

      END TRY

     BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

ALTER PROCEDURE [dbo].[PKG_INVENTORY.PRC_GET_PART_DETAILS_MOBILE_API]  
   @PI_CODE VARCHAR(MAX) = NULL,
   @PI_BARCODE_SEARCH VARCHAR(MAX) = NULL
AS 
    
   BEGIN

      BEGIN TRY

----------------TOTAL ONHAND_QTY & TOTAL_AVL_QTY

     select 
			q1.PAR_ID,
			q1.CODE AS SKU,	
			q1.DESCRIPTION AS SKU_DESCRIPTION,
			sum(q1.OH_QUANTITY) AS TOTAL_ONHAND_QUANTITY,
			sum(q1.AVL_QUANTITY) AS TOTAL_AVAILABLE_QUANTITY
from	(
			SELECT				PART.PAR_ID,
								PART.CODE, 
								(select description from INV_PARTS_WV where par_id= PARLOT.PAR_ID) AS DESCRIPTION,
								ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_ONHAND_TOTAL](PART.PAR_ID, NULL),0) as OH_QUANTITY,
								ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_AVL_TOTAL](PART.PAR_ID, NULL),0) AS AVL_QUANTITY

			FROM		INV_PARTS_WV PART
						LEFT JOIN  INV_PARTS_LOT_DETAILS_WV PARLOT
						  ON PARLOT.PAR_ID=PART.PAR_ID

			WHERE		----search by SKU
						  (
							(  @PI_CODE IS NULL ) 
									   OR
							( PART.CODE = @PI_CODE AND @PI_CODE IS NOT NULL)
						  )
						----search by BARCODE
						AND
						  (
							(  @PI_BARCODE_SEARCH IS NULL ) 
									   OR
							( PART.BARCODE_NUMBER = @PI_BARCODE_SEARCH AND @PI_BARCODE_SEARCH IS NOT NULL)
						  )
		)q1

GROUP BY	q1.CODE,q1.DESCRIPTION,q1.PAR_ID;


-----------------Total Open Purchase Orders

 
 
Select q1.PURORD_ID,q1.PO_NUMBER,q1.PAR_ID,q1.CODE AS SKU,q1.PO_CURRENT_STATUS AS STATUS,SUM(q1.QUANTITY) AS QUANTITY from
(
select	
		PURDET.PURORD_ID,
		PART.PAR_ID,
		(SELECT PO_NUMBER FROM INV_PURCHASE_ORDERS_WV where PURORD_ID=PURDET.PURORD_ID) AS PO_NUMBER,
		PART.CODE ,
		cast(PURDET.QUANTITY as INT) AS QUANTITY,
		[dbo].[PKG_INVENTORY.PRC_GET_PO_CURRENT_STATUS](PURDET.PURORD_ID) AS PO_CURRENT_STATUS

from	INV_PURCHASE_ORDER_DETAILS_WV PURDET
		INNER JOIN INV_PARTS_WV PART ON PURDET.PAR_ID=PART.PAR_ID

WHERE	
		----search by SKU
						  (
							(  @PI_CODE IS NULL ) 
									   OR
							( PART.CODE = @PI_CODE AND @PI_CODE IS NOT NULL)
						  )
		----search by BARCODE
						AND
						  (
							(  @PI_BARCODE_SEARCH IS NULL ) 
									   OR
							( PART.BARCODE_NUMBER = @PI_BARCODE_SEARCH AND @PI_BARCODE_SEARCH IS NOT NULL)
						  )
)q1

WHERE UPPER(q1.PO_CURRENT_STATUS) NOT IN ('COMPLETED','VOID')

GROUP BY q1.PURORD_ID,q1.CODE,q1.PO_CURRENT_STATUS,q1.PO_NUMBER,q1.PAR_ID--,q1.QUANTITY

ORDER BY q1.PO_NUMBER DESC;


	 
	   ----Total Open Sale Orders
   Select q1.SALEORD_ID,q1.SALE_ORDER_NUMBER,q1.PAR_ID,q1.CODE AS SKU,q1.SO_CURRENT_STATUS AS STATUS,q1.INVENTORY,SUM(q1.QUANTITY) AS QUANTITY from
(
select	
		SALEDET.SALEORD_ID,
		PART.PAR_ID,
		(SELECT SALEORD_NUMBER FROM INV_INVENTORY_SALE_ORDERS_WV where SALEORD_ID=SALEDET.SALEORD_ID) AS SALE_ORDER_NUMBER,
		(select (WAR.CODE + ' - ' + WAR.DESCRIPTION) from INV_WAREHOUSES_WV WAR where WAR_ID in (select WAR_ID from INV_INVENTORY_SALE_ORDERS_WV where SALEORD_ID=SALEDET.SALEORD_ID)) AS INVENTORY,
		PART.CODE ,
		cast(SALEDET.QUANTITY as INT) AS QUANTITY,
		[dbo].[PKG_INVENTORY.PRC_GET_SALE_ORDER_CURRENT_STATUS](SALEDET.SALEORD_ID) as SO_CURRENT_STATUS

from	INV_INVENTORY_SALE_ORDER_DETAILS_WV SALEDET
		INNER JOIN INV_PARTS_WV PART ON SALEDET.PAR_ID=PART.PAR_ID

WHERE	----search by SKU
						  (
							(  @PI_CODE IS NULL ) 
									   OR
							( PART.CODE = @PI_CODE AND @PI_CODE IS NOT NULL)
						  )
		----search by BARCODE
						AND
						  (
							(  @PI_BARCODE_SEARCH IS NULL ) 
									   OR
							( PART.BARCODE_NUMBER = @PI_BARCODE_SEARCH AND @PI_BARCODE_SEARCH IS NOT NULL)
						  )
)q1

WHERE q1.SO_CURRENT_STATUS NOT IN ('Delivered','Void','Dispatched','INCOMPLETE DATA')

GROUP BY q1.SALEORD_ID,q1.CODE,q1.SO_CURRENT_STATUS,q1.SALE_ORDER_NUMBER,q1.PAR_ID,q1.INVENTORY--,q1.QUANTITY

ORDER BY q1.SALE_ORDER_NUMBER DESC
	
	------------------Calculate Total Number of Sale Order in Inventory---------------------
select count(*) as TOTAL_SALE_ORDERS,q2.INVENTORY from (
Select q1.SALEORD_ID,q1.SALE_ORDER_NUMBER,q1.PAR_ID,q1.CODE AS SKU,q1.SO_CURRENT_STATUS AS STATUS,q1.INVENTORY,SUM(q1.QUANTITY) AS QUANTITY from
(
select	
		SALEDET.SALEORD_ID,
		PART.PAR_ID,
		(SELECT SALEORD_NUMBER FROM INV_INVENTORY_SALE_ORDERS_WV where SALEORD_ID=SALEDET.SALEORD_ID) AS SALE_ORDER_NUMBER,
		(select (WAR.CODE + ' - ' + WAR.DESCRIPTION) from INV_WAREHOUSES_WV WAR where WAR_ID in (select WAR_ID from INV_INVENTORY_SALE_ORDERS_WV where SALEORD_ID=SALEDET.SALEORD_ID)) AS INVENTORY,
		PART.CODE ,
		cast(SALEDET.QUANTITY as INT) AS QUANTITY,
		[dbo].[PKG_INVENTORY.PRC_GET_SALE_ORDER_CURRENT_STATUS](SALEDET.SALEORD_ID) as SO_CURRENT_STATUS

from	INV_INVENTORY_SALE_ORDER_DETAILS_WV SALEDET
		INNER JOIN INV_PARTS_WV PART ON SALEDET.PAR_ID=PART.PAR_ID

WHERE	----search by SKU
						  (
							(  @PI_CODE IS NULL ) 
									   OR
							( PART.CODE = @PI_CODE AND @PI_CODE IS NOT NULL)
						  )

						  ----search by BARCODE
						AND
						  (
							(  @PI_BARCODE_SEARCH IS NULL ) 
									   OR
							( PART.BARCODE_NUMBER = @PI_BARCODE_SEARCH AND @PI_BARCODE_SEARCH IS NOT NULL)
						  )
		
)q1

WHERE q1.SO_CURRENT_STATUS NOT IN ('Delivered','Void','Dispatched','INCOMPLETE DATA')

GROUP BY q1.SALEORD_ID,q1.CODE,q1.SO_CURRENT_STATUS,q1.SALE_ORDER_NUMBER,q1.PAR_ID,q1.INVENTORY--,q1.QUANTITY

--ORDER BY q1.SALE_ORDER_NUMBER DESC
	)q2

GROUP BY q2.INVENTORY

      END TRY

      BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

ALTER PROCEDURE [dbo].[PKG_INVENTORY.PRC_GET_PURCHASE_ORDER_LIST_PDF_REPORT] 

   @PI_PO_NUMBER				VARCHAR(200) = NULL,
   @PI_PO_NUMBER_FROM			VARCHAR(200) = NULL,
   @PI_PO_NUMBER_TO				VARCHAR(200) = NULL,
   
   @PI_PO_DATE_FROM				DATETIMEOFFSET = NULL,
   @PI_PO_DATE_TO				DATETIMEOFFSET = NULL,

   --@PI_INVPARLOT_ID				FLOAT(53) = NULL,
   --@PI_LOT_EXPIRY_DATE_FROM		DATE = NULL,
   --@PI_LOT_EXPIRY_DATE_TO		DATE = NULL,

   @PI_VEN_ID					FLOAT(53) = NULL,
   @PI_PO_STATUS				VARCHAR(MAX) = NULL,
   --@PI_PAR_ID					FLOAT(53) = NULL,

   --@PI_USE_ID_PREPARED_BY		FLOAT(53) = NULL,
   --@PI_USE_ID_FINALIZED_BY		FLOAT(53) = NULL,

   @PI_TOTAL_COST_FROM			FLOAT(53) = NULL,
   @PI_TOTAL_COST_TO			FLOAT(53) = NULL,

   @PO_PUR_ORD_LIST				VARCHAR(8000)  OUTPUT

AS 
    
   BEGIN

      BEGIN TRY

               SELECT  
                  PO.PURORD_ID, 
                  PO.PO_NUMBER, 
				  PO.REFERENCE_NUMBER,
                  CAST(switchoffset(PO.PO_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime) AS PO_DATE, 
				  cast(switchoffset(po.po_date, DBO.[get_context_value]('USER_OFFSET')) AS DATETIME) AS PO_DATE_PDF,
                  VEN.DESCRIPTION AS SUPPLIER, 
            --      ISNULL(WAR.CODE, '') + ' - ' + ISNULL(WAR.DESCRIPTION, '') AS INVENTORY, 
                  CAST(switchoffset(PO.FINALIZED_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime) AS FINALIZED_DATE,  
				  switchoffset(PO.ETA_DATE, DBO.[get_context_value]('USER_OFFSET')) AS ETA_DATE,  
				  CAST(switchoffset(PO.APPROVED_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime) AS APPROVED_DATE,
				  CAST(switchoffset(PO.COMPLETED_DATE, DBO.[get_context_value]('USER_OFFSET')) AS datetime) AS COMPLETED_DATE,
				  CASE 
                     WHEN PO.VOID_DATE IS NULL THEN 'N'
                     ELSE 'Y'
                  END AS VOID,
				  [dbo].[PKG_INVENTORY.PRC_GET_PO_CURRENT_STATUS](PO.PURORD_ID) AS PO_CURRENT_STATUS,
				  (SELECT ROUND(ISNULL(SUM(  ISNULL( PODET.QUANTITY,0) * ISNULL(PODET.COST,0)) ,0),2)
					FROM INV_PURCHASE_ORDER_DETAILS_WV PODET 
					WHERE PODET.PURORD_ID = PO.PURORD_ID) AS TOTAL_COST,
					ven.ADDRESS_1,
					 VEN.PROVINCE as Province_code,
					 ven.city,
					 ven.COUNTRY
					 --USR.CODE AS APPROVED_BY_USER,
					 --USR2.CODE AS FINALIZED_BY_USER


               FROM 
                    INV_PURCHASE_ORDERS_WV  AS PO 
 						--left join	INV_PURCHASE_ORDER_DETAILS_WV	AS podet	on podet.PURORD_ID = po.PURORD_ID
						LEFT JOIN   REP_VENDORS_WV					AS VEN		ON PO.VEN_ID = VEN.VEN_ID 
					 
					 --LEFT JOIN YM_USERS_WV USR
					 --on PO.USE_ID_PREPARED_BY = USR.USE_ID
					 --LEFT JOIN YM_USERS_WV USR2
					 --on PO.USE_ID_FINALIZED_BY = USR2.USE_ID
               WHERE 
			    ----search by SUPPLIER/VENDOR
				  (
					(  @PI_VEN_ID IS NULL ) 
							   OR
					( PO.VEN_ID = @PI_VEN_ID AND @PI_VEN_ID IS NOT NULL)
				  )

				  AND

			    ----search by PURCHASE ORDER NUMBER 
				  (
					( isnull(@PI_PO_NUMBER ,'X') = 'X' ) 
							   OR
					( UPPER(PO.PO_NUMBER) LIKE '%' + UPPER(@PI_PO_NUMBER)+'%' AND @PI_PO_NUMBER IS NOT NULL)
				  )

				  AND
                   (
					(  @PI_PO_NUMBER_FROM IS NULL AND @PI_PO_NUMBER_TO IS NULL ) 
						OR
					(	
						PO.CREATE_DATE BETWEEN --'2023-01-29 18:29:33.584975 +00:00' and '2023-02-03 15:40:08.529924 +00:00'
						(SELECT CREATE_DATE FROM INV_PURCHASE_ORDERS_WV WHERE PO_NUMBER=@PI_PO_NUMBER_FROM) AND (SELECT CREATE_DATE FROM INV_PURCHASE_ORDERS_WV WHERE PO_NUMBER=@PI_PO_NUMBER_TO) 
						AND @PI_PO_NUMBER_FROM IS NOT NULL AND @PI_PO_NUMBER_TO IS NOT NULL)
				   )
				  
				    AND
                  ----search by PO DATE (from)
				  (
					( @PI_PO_DATE_FROM IS NULL ) 
										OR
					( (switchoffset(PO.PO_DATE, DBO.[get_context_value]('USER_OFFSET'))) >= @PI_PO_DATE_FROM  AND @PI_PO_DATE_FROM IS NOT NULL)
				  )

				     AND
                  ----search by PO DATE (to)
				  (
					( @PI_PO_DATE_TO IS NULL ) 
										OR
					( (switchoffset(PO.PO_DATE, DBO.[get_context_value]('USER_OFFSET'))) <= @PI_PO_DATE_TO  AND @PI_PO_DATE_TO IS NOT NULL)
				  )

				  AND
                  ----search by STATUS
				  (
					(  @PI_PO_STATUS IS NULL ) OR
					( [dbo].[PKG_INVENTORY.PRC_GET_PO_CURRENT_STATUS](PO.PURORD_ID) = @PI_PO_STATUS AND @PI_PO_STATUS IS NOT NULL)
				  ) 

				  
				   AND
                  ----search by Total_cost From
				  (
					(  @PI_TOTAL_COST_FROM IS NULL ) 
							   OR
					(  (SELECT ROUND(ISNULL(SUM(ISNULL( PODET.QUANTITY,0) * ISNULL(PODET.COST,0)) ,0),2) FROM INV_PURCHASE_ORDER_DETAILS_WV PODET WHERE PODET.PURORD_ID = PO.PURORD_ID) >= @PI_TOTAL_COST_FROM AND @PI_TOTAL_COST_FROM IS NOT NULL)
				  )

				    AND
                  ----search by Total_cost To  
				  (
					(  @PI_TOTAL_COST_TO IS NULL ) 
							   OR
					(  (SELECT ROUND(ISNULL(SUM(ISNULL( PODET.QUANTITY,0) * ISNULL(PODET.COST,0)) ,0),2) FROM INV_PURCHASE_ORDER_DETAILS_WV PODET WHERE PODET.PURORD_ID = PO.PURORD_ID) <= @PI_TOTAL_COST_TO AND @PI_TOTAL_COST_TO IS NOT NULL)
				  )

     --             ----search by PART/SKU  
				 -- (
					--(  @PI_PAR_ID IS NULL ) 
					--		   OR
					--(  PART.PAR_ID = @PI_PAR_ID AND @PI_PAR_ID IS NOT NULL)
				 -- )
				  
				 -- AND
     --             ----search by LOT  
				 -- (
					--(  @PI_INVPARLOT_ID IS NULL ) 
					--		   OR
					--(  PARLOT.INVPARLOT_ID = @PI_INVPARLOT_ID AND @PI_INVPARLOT_ID IS NOT NULL)
				 -- )
				  
				 ---- AND
				 ----  ----search by LOT DATE EXPIRY (from & to)
				 ---- (
					----( @PI_LOT_EXPIRY_DATE_FROM IS NULL AND @PI_LOT_EXPIRY_DATE_TO IS NULL ) 
					----					OR
					----( CAST(PARLOT.EXPIRY_DATE AS DATE) >= @PI_LOT_EXPIRY_DATE_FROM AND CAST(PARLOT.EXPIRY_DATE AS DATE) <= ISNULL(@PI_LOT_EXPIRY_DATE_TO , SYSDATETIMEOFFSET()) AND @PI_LOT_EXPIRY_DATE_FROM IS NOT NULL)
				 ---- ) 

				 --  AND
				 --  ----search by LOT DATE EXPIRY (from)
				 -- (
					--( @PI_LOT_EXPIRY_DATE_FROM IS NULL) 
					--					OR
					--( CAST(PARLOT.EXPIRY_DATE AS DATE) >= @PI_LOT_EXPIRY_DATE_FROM AND @PI_LOT_EXPIRY_DATE_FROM IS NOT NULL)
				 -- ) 

				 --   AND
				 --  ----search by LOT DATE EXPIRY (to)
				 -- (
					--( @PI_LOT_EXPIRY_DATE_TO IS NULL) 
					--					OR
					--( CAST(PARLOT.EXPIRY_DATE AS DATE) <= @PI_LOT_EXPIRY_DATE_TO AND @PI_LOT_EXPIRY_DATE_TO IS NOT NULL)
				 -- ) 



      END TRY

      BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH
   END
--------------------------------------------


ALTER PROCEDURE [dbo].[PKG_INVENTORY.PRC_STOCK_ORDER_AUDIT_CHANGE]
					@PI_TABLE_ID    float(53) = null,
                    @PI_USER_ID   float(53) = null,
					@PI_WAR_ID		FLOAT = NULL,
					@PI_PAR_ID		FLOAT = NULL,
					@PI_INVPARLOT_ID FLOAT = NULL,
					@PI_WARSTOLOC_ID FLOAT = NULL,
					@PI_QUANTITY	FLOAT = NULL,
					@PI_TYPE		VARCHAR(10) = NULL,
                    @PO_MSG       varchar(max)  OUTPUT
 AS
BEGIN
    DECLARE
    @V_QUANTITY float(53),
	@LOT_FLAG	VARCHAR(1),
	@WAR_CODE	VARCHAR(100)

  
    BEGIN TRY

	SET @PO_MSG = NULL
    -----INSERT ENTRY TO AUDIT
  
	IF @PI_TYPE = 'PLUS'
	   SET @V_QUANTITY = @PI_QUANTITY
	ELSE
		BEGIN
		IF @PI_TYPE = 'MINUS'
		SET @V_QUANTITY = @PI_QUANTITY * -1
		END

      INSERT INTO INV_INVENTORY_AUDITS_WV
        (WAR_ID,
         USE_ID,
         PAR_ID,
         TRANSACTION_TIMESTAMP,
         INVSTODET_ID,
         QUANTITY,
         UNIT_COST,
		 INVPARLOT_ID,
		 WARSTOLOC_ID)
      
	  VALUES(
	         @PI_WAR_ID,
			 @PI_USER_ID,
             @PI_PAR_ID,
			 SYSDATETIMEOFFSET(),
			 @PI_TABLE_ID,
			 @V_QUANTITY ,
              [dbo].[PKG_INVENTORY.PRC_GET_PART_COST_AMOUNT](@PI_PAR_ID,NULL)
             ,@PI_INVPARLOT_ID,
			  @PI_WARSTOLOC_ID
         )

    ----change Lot quarantine flag
	select @war_code = code 
	from inv_warehouses_wv
	where war_id = @PI_WAR_ID

	select @lot_flag = quarantine_flag
	from INV_PARTS_LOT_DETAILS_ALL_WV
	where INVPARLOT_ID = @PI_INVPARLOT_ID

	if @war_code = 'QT' and @lot_flag = 'Y' AND @PI_TYPE = 'MINUS'
	UPDATE INV_PARTS_LOT_DETAILS_ALL_WV 
	SET QUARANTINE_FLAG = 'N'
	WHERE INVPARLOT_ID = @PI_INVPARLOT_ID


	   SET  @PO_MSG = 'T'

	  END TRY
        BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH
END
--------------------------------------------
CREATE  PROCEDURE [dbo].[PKG_ADMINISTRATION.PRC_GET_CUSTOMER_DROP_SHIP_ADDRESS_DET]  
 
   @PI_CUS_DRPSHP_ID float(53)=null,
   @PO_CUS_LIST varchar(8000)  OUTPUT
AS  
   BEGIN

      BEGIN TRY

         SET @PO_CUS_LIST = NULL

		 --Drop Ship Addresses
		 SELECT 
			DRPSHP.CUS_DRPSHP_ID,
            DRPSHP.CUS_ID AS CUS_ID, 
            DRPSHP.ADDRESS_1, 
            DRPSHP.CITY AS CITY, 
            COUNTRY.NAME AS COUNTRY, 
            PROVINCE.NAME AS PROVINCE, 
            DRPSHP.ADDRESS_2, 
            DRPSHP.POSTAL_CODE, 
            DRPSHP.CREATE_DATE, 
            DRPSHP.CREATE_USER, 
            DRPSHP.LAST_UPDATE_DATE, 
            DRPSHP.LAST_UPDATE_USER, 
            DRPSHP.ACTIVE_FLAG     AS ACTIVE_FLAG, 
			DRPSHP.ADDRESS_2,
			DRPSHP.FIRST_NAME,
			DRPSHP.LAST_NAME,
			DRPSHP.PHONE
            FROM 
              CUSTOMERS_DROP_SHIP_ADDRESSES  AS DRPSHP 
               LEFT JOIN ADM_PROVINCE_STATES_WV  AS PROVINCE 
               ON DRPSHP.PROSTA_ID = PROVINCE.PROSTA_ID 
               LEFT JOIN ADM_COUNTRIES_WV  AS COUNTRY 
               ON PROVINCE.COU_ID = COUNTRY.COU_ID 

         WHERE DRPSHP.CUS_DRPSHP_ID  = @PI_CUS_DRPSHP_ID 
		 


      END TRY

     BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH
   END
--------------------------------------------
CREATE  PROCEDURE [dbo].[PKG_ADMINISTRATION.PRC_GET_CUSTOMER_DROP_SHIP_ADDRESS_LIST]  
 
   @PI_CUS_ID float(53)=null,
   @PO_CUS_LIST varchar(8000)  OUTPUT
AS  
   BEGIN

      BEGIN TRY

         SET @PO_CUS_LIST = NULL

		 --Drop Ship Addresses
		 SELECT 
			DRPSHP.CUS_DRPSHP_ID,
            DRPSHP.CUS_ID AS CUS_ID, 
            DRPSHP.ADDRESS_1, 
            DRPSHP.CITY AS CITY, 
            COUNTRY.NAME AS COUNTRY, 
            PROVINCE.NAME AS PROVINCE, 
            DRPSHP.ADDRESS_2, 
            DRPSHP.POSTAL_CODE, 
            DRPSHP.CREATE_DATE, 
            DRPSHP.CREATE_USER, 
            DRPSHP.LAST_UPDATE_DATE, 
            DRPSHP.LAST_UPDATE_USER, 
            DRPSHP.ACTIVE_FLAG     AS ACTIVE_FLAG, 
			DRPSHP.ADDRESS_2,
			DRPSHP.FIRST_NAME,
			DRPSHP.LAST_NAME,
			DRPSHP.PHONE
            FROM 
              CUSTOMERS_DROP_SHIP_ADDRESSES  AS DRPSHP 
               LEFT JOIN ADM_PROVINCE_STATES_WV  AS PROVINCE 
               ON DRPSHP.PROSTA_ID = PROVINCE.PROSTA_ID 
               LEFT JOIN ADM_COUNTRIES_WV  AS COUNTRY 
               ON PROVINCE.COU_ID = COUNTRY.COU_ID 

         WHERE DRPSHP.CUS_ID   = @PI_CUS_ID 
		 


      END TRY

     BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH
   END
--------------------------------------------

CREATE PROCEDURE  [dbo].[PKG_ADMINISTRATION.PRC_POST_CUSTOMERS_DROP_SHIP_ADDRESSES]  
    

	@PI_CUS_DRPSHP_ID FLOAT(53)=NULL,
   @PI_CUS_ID float(53)=NULL,
   @PI_ADDRESS_1 varchar(max)=NULL,
   @PI_ADDRESS_2 varchar(max)=NULL,
   @PI_PROSTA_ID float(53)=NULL,
   @PI_CITY varchar(max)=NULL,
   @PI_POSTAL_CODE varchar(max)=NULL,
   @PI_ACTIVE_FLAG VARCHAR(1)=NULL,
   @PI_FIRST_NAME VARCHAR(50)=NULL,
   @PI_LAST_NAME VARCHAR(50)=NULL,
   @PI_PHONE VARCHAR(25)=NULL,
   @PO_MSG varchar(max)  OUTPUT,
   @PO_DETAIL int  OUTPUT
AS 
   /*Generated by SQL Server Migration Assistant for Oracle version 7.6.0.*/
   BEGIN 
   --select * from ym_customers_wv order by CREATE_DATE desc

      DECLARE
         

         @V_NEXTVAL int

      BEGIN TRY

         SET @PO_MSG = NULL

         IF @PI_CUS_DRPSHP_ID IS NULL
            BEGIN

               SET @V_NEXTVAL = NEXT VALUE FOR  ORASEQ

               INSERT  CUSTOMERS_DROP_SHIP_ADDRESSES_WV(
						  CUS_DRPSHP_ID,
						  CUS_ID, 
						  ADDRESS_1, 
						  ADDRESS_2, 
						  PROSTA_ID, 
						  CITY, 
						  POSTAL_CODE,
						  ACTIVE_FLAG,
						  FIRST_NAME,
						  LAST_NAME,
						  PHONE
				  )
                  VALUES (
						 @V_NEXTVAL, 
						 @PI_CUS_ID, 
						 @PI_ADDRESS_1, 
						 @PI_ADDRESS_2, 
						 @PI_PROSTA_ID, 
						 @PI_CITY, 
						 @PI_POSTAL_CODE,
						 @PI_ACTIVE_FLAG,
						 @PI_FIRST_NAME,
						 @PI_LAST_NAME,
						 @PI_PHONE
					 )
 
               
               SET @PO_MSG = 'T'
			   SET @PO_DETAIL = @V_NEXTVAL
               

			   --SET @PO_CUS_ID = @V_NEXTVAL

            END
         ELSE 
            /*- UPDATE*/
            UPDATE  CUSTOMERS_DROP_SHIP_ADDRESSES_WV
               SET  
                  ADDRESS_1 = @PI_ADDRESS_1, 
                  ADDRESS_2 = @PI_ADDRESS_2, 
                  PROSTA_ID = @PI_PROSTA_ID, 
                  CITY = @PI_CITY, 
                  POSTAL_CODE = @PI_POSTAL_CODE,
				  ACTIVE_FLAG = @PI_ACTIVE_FLAG,
				  FIRST_NAME = @PI_FIRST_NAME,
				  LAST_NAME = @PI_LAST_NAME,
				  PHONE = @PI_PHONE

            WHERE CUSTOMERS_DROP_SHIP_ADDRESSES_WV.CUS_DRPSHP_ID = @PI_CUS_DRPSHP_ID
			 
         SET @PO_MSG = 'T'
		 SET @PO_DETAIL = @PI_CUS_DRPSHP_ID
		 --SET @PO_CUS_ID = @PI_CUS_ID
      END TRY

     BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

CREATE PROCEDURE [dbo].[PKG_INVENTORY.PRC_GET_PURCHASE_ORDER_RECEIVING_DETAIL_PDF_REPORT]  

   @PI_PURORD_ID float(53) = NULL,
   @PI_INVPARLOT_ID				FLOAT(53) = NULL,
   @PI_LOT_EXPIRY_DATE_FROM		DATETIMEOFFSET = NULL,
   @PI_LOT_EXPIRY_DATE_TO		DATETIMEOFFSET = NULL,
   @PI_PAR_ID					FLOAT(53) = NULL,
   @PI_NON_STOCK_ITEM_FLAG		VARCHAR(1) = NULL

AS 
    
   BEGIN

      BEGIN TRY
			SELECT 
					PO_DET.PART_NUMBER,
					PO_DET.PART_DESCRIPTION,
					PO_DET.SKU_MANUFACTURE,
					PO_DET.QUANTITY,
					PO_DET.LOT_NUMBER,
					PO_DET.QTY_ONHAND,
					PO_DET.EXPIRY_DATE_PDF
			
			FROM
				(
					SELECT 
				PART.CODE PART_NUMBER,
				PART.DESCRIPTION PART_DESCRIPTION,
				PART.SKU_MANUFACTURE,
				ISNULL(DET.QUANTITY, 0) AS QUANTITY,
				PARLOT.CODE	 AS LOT_NUMBER,
				CASE
						WHEN ISNULL(PART.NON_STOCK_ITEM_FLAG,'N')='N' THEN

							  CASE 
									WHEN DET.INVPARLOT_ID IS NOT NULL THEN
										ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOT_ONHAND_TOTAL] (PART.PAR_ID, DET.INVPARLOT_ID, isnull(DATEADD(Second,-10,PR.COMPLETED_DATE),SYSDATETIMEOFFSET())),0)
									ELSE 
										0
							  END 

						WHEN PART.NON_STOCK_ITEM_FLAG = 'Y' THEN
								
								ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_ONHAND_TOTAL_NON_STOCK](PART.PAR_ID, isnull(DATEADD(Second,-10,PR.COMPLETED_DATE),SYSDATETIMEOFFSET())),0)

				   END AS QTY_ONHAND,
			 CONVERT(VARCHAR(10),switchoffset(PARLOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101)  AS EXPIRY_DATE_PDF
			  
					FROM INV_PURCHASE_ORDER_DETAILS_WV DET
					LEFT JOIN INV_PARTS_WV PART
					  ON DET.par_id = PART.par_id
					LEFT JOIN ADM_UOM_WV UOM
					  ON PART.uom_id = UOM.UOM_ID
					LEFT JOIN ADM_UOM_WV RUOM
					  ON RUOM.uom_id = DET.UOM_ID_REORDERING
					LEFT JOIN REP_WORK_ORDERS_WV WO
					  ON WO.WORORD_ID = DET.worord_id
				   INNER JOIN INV_PURCHASE_ORDERS_WV PR
					  ON PR.purord_id = DET.purord_id
					LEFT JOIN INV_PART_CATALOGUES_WV PC
					  ON PC.PAR_ID = DET.par_id
					 AND PC.VEN_ID = PR.ven_id
					 and det.CATALOG_NUMBER = pc.CATALOGUE_NUMBER
					 LEFT JOIN INV_INVENTORY_RCV_DETAILS_WV RECDET
					 ON RECDET.PURORDDET_ID = DET.PURORDDET_ID
					 LEFT JOIN INV_INVENTORY_RECEIVINGS_WV REC
					 ON REC.INVREC_ID = RECDET.INVREC_ID
			  --      LEFT JOIN INV_WAREHOUSES_WV W
			  --        ON W.WAR_ID = PR.war_id
					LEFT JOIN INV_PARTS_LOT_DETAILS_WV PARLOT
					  ON DET.INVPARLOT_ID = PARLOT.INVPARLOT_ID
				   WHERE DET.purord_id = @PI_PURORD_ID

				   AND
				   
                  ----search by PART/SKU  
				  (
					(  @PI_PAR_ID IS NULL ) 
							   OR
					(  PART.PAR_ID = @PI_PAR_ID AND @PI_PAR_ID IS NOT NULL)
				  )
				  
				  AND
                  ----search by LOT  
				  (
					(  @PI_INVPARLOT_ID IS NULL ) 
							   OR
					(  PARLOT.INVPARLOT_ID = @PI_INVPARLOT_ID AND @PI_INVPARLOT_ID IS NOT NULL)
				  )
				  
				  AND
				   ----search by LOT DATE EXPIRY (from & to)
				  (
					( @PI_LOT_EXPIRY_DATE_FROM IS NULL) 
										OR
					( 
						PARLOT.EXPIRY_DATE >= @PI_LOT_EXPIRY_DATE_FROM 
						AND @PI_LOT_EXPIRY_DATE_FROM IS NOT NULL
					)
				  ) 

				  AND
				   ----search by LOT DATE EXPIRY (from & to)
				  (
					( @PI_LOT_EXPIRY_DATE_TO IS NULL) 
										OR
					( 
						PARLOT.EXPIRY_DATE <= @PI_LOT_EXPIRY_DATE_TO 
						AND @PI_LOT_EXPIRY_DATE_TO IS NOT NULL
					)
				  ) 

				  AND
                  ----search by NON STOCK ITEMS  
				  (
					(  @PI_NON_STOCK_ITEM_FLAG IS NULL ) 
							   OR
					(  PART.NON_STOCK_ITEM_FLAG = @PI_NON_STOCK_ITEM_FLAG AND @PI_NON_STOCK_ITEM_FLAG IS NOT NULL)
				  )

			) PO_DET

			GROUP BY
					PO_DET.PART_NUMBER,
					PO_DET.PART_DESCRIPTION,
					PO_DET.SKU_MANUFACTURE,
					PO_DET.QUANTITY,
					PO_DET.LOT_NUMBER,
					PO_DET.QTY_ONHAND,
					PO_DET.EXPIRY_DATE_PDF

      END TRY

      BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

CREATE PROCEDURE [dbo].[PKG_INVENTORY.PRC_GET_RECEIVING_PDF]  
   @PI_FINZ_FLAG varchar(max)= NULL,
   @PI_VOID_FLAG varchar(max)= NULL,
   @PI_REC_NUMBER  VARCHAR(MAX) = NULL,
   @PI_REC_NUMBER_FROM  VARCHAR(MAX) = NULL,
   @PI_REC_NUMBER_TO  VARCHAR(MAX) = NULL,
   @PI_REC_DATE_FROM	DATETIMEOFFSET = NULL,
   @PI_REC_DATE_TO DATETIMEOFFSET = NULL,
   @PI_VEN_ID		FLOAT(53) = NULL,
   @PI_REC_STATUS	VARCHAR(MAX) = NULL,
   @PI_BACK_ORDER_FLAG VARCHAR(1)=NULL,
   @PO_RECEIVING_LIST varchar(8000)  OUTPUT
AS 
   
   BEGIN

      BEGIN TRY

         SET @PO_RECEIVING_LIST = NULL
              
          SELECT
                        REC.INVREC_ID, 
                        REC.RECEIVING_NUMBER, 
                        switchoffset(PO.PO_DATE, DBO.[get_context_value]('USER_OFFSET'))  AS PO_DATE, 
						switchoffset(REC.RECEIVING_DATE, DBO.[get_context_value]('USER_OFFSET'))   AS REC_DATE, 
						cast(switchoffset(REC.RECEIVING_DATE, DBO.[get_context_value]('USER_OFFSET')) AS DATETIME) AS REC_DATE_PDF,
                        switchoffset(REC.RECEIVING_COMPLETE_DATE , DBO.[get_context_value]('USER_OFFSET'))   AS RECEIVING_COMPLETE_DATE, 
                        switchoffset(REC.RFP_DATE, DBO.[get_context_value]('USER_OFFSET'))  AS RFP_DATE, 
						VEN.DESCRIPTION AS SUPPLIER, 
						VEN.EMAIL as SUPPLIER_EMAIL,
						VEN.ADDRESS_1,
						VEN.PHONE_1 AS SUPPLIER_PHONE,
						VEN.CITY,
                         
                        PO.PO_NUMBER, 
                        REC.SUPPLIER_INVOICE_NUMBER, 
                        REC.PURORD_ID, 
                       switchoffset(REC.RELEASED_DATE, DBO.[get_context_value]('USER_OFFSET'))   AS RELEASED_DATE, 
                   	   DBO.[PKG_INVENTORY.PRC_GET_RECEIVING_CURRENT_STATUS](REC.INVREC_ID) AS RECEIVING_STATUS,
					  CASE 
                        WHEN REC.VOID_DATE IS NULL THEN 'N'
                        ELSE 'Y'
                       END AS VOID,
					    CASE
					   WHEN REC.RELEASED_DATE IS NULL THEN
							'N'
					   ELSE
							'Y'
					 END RELEASED_FLAG

                     FROM 
                          INV_INVENTORY_RECEIVINGS_WV  AS REC 
                           LEFT JOIN   INV_WAREHOUSES_WV		AS WAR ON REC.WAR_ID	= WAR.WAR_ID 
                           LEFT JOIN   REP_VENDORS_WV			AS VEN ON REC.VEN_ID	= VEN.VEN_ID 
                           LEFT JOIN   INV_PURCHASE_ORDERS_WV	AS PO  ON REC.PURORD_ID = PO.PURORD_ID
                     WHERE 
                       -- REC.RECEIVING_COMPLETE_DATE IS NULL AND 
							REC.RETURN_FLAG <> 'Y' 
							AND 
							( 
								(
									(@PI_FINZ_FLAG  = 'N' or @PI_FINZ_FLAG = 'Y') 
										AND 
									REC.RECEIVING_COMPLETE_DATE IS NULL
								)  
									OR 
									( @PI_FINZ_FLAG IS NULL  AND 1=1)
							)

							AND 
							( 
								(
									(@PI_VOID_FLAG  = 'N' or @PI_VOID_FLAG = 'Y') 
										AND 
									REC.VOID_DATE IS NULL
								)  
									OR 
								( @PI_VOID_FLAG IS NULL  AND 1=1)
							)
						
                 			  ----search by PURCHASE ORDER NUMBER 
				 --and (
				 -- ( isnull(@PI_PO_NUMBER ,'X') = 'X' ) OR
				 -- ( UPPER(PO.PO_NUMBER) LIKE '%' + UPPER(@PI_PO_NUMBER)+'%' AND @PI_PO_NUMBER IS NOT NULL)
				 -- ) 
				  
				  AND
                 			  ----search by RECEIVING ORDER NUMBER 
				   (
					( isnull(@PI_REC_NUMBER ,'X') = 'X' ) OR
					( UPPER(REC.RECEIVING_NUMBER) LIKE '%' + UPPER(@PI_REC_NUMBER)+'%' AND @PI_REC_NUMBER IS NOT NULL)
				  ) 
				  
				  ----search by RECEIVING DATE FROM
				  AND
				  (
					( @PI_REC_DATE_FROM IS NULL ) 
						OR
					( REC.RECEIVING_DATE >= @PI_REC_DATE_FROM AND @PI_REC_DATE_FROM IS NOT NULL)
				  ) 

				   ----search by RECEIVING DATE FROM
				  AND
				  (
					( @PI_REC_DATE_TO IS NULL ) 
						OR
					( REC.RECEIVING_DATE <= @PI_REC_DATE_TO AND @PI_REC_DATE_TO IS NOT NULL)
				  ) 
				  
				  AND
                  ----search by SUPPLIER/VENDOR
				  (
				  (  @PI_VEN_ID IS NULL ) OR
				  ( PO.VEN_ID = @PI_VEN_ID AND @PI_VEN_ID IS NOT NULL)
					) AND
  
                  ----search by STATUS
				  (
				  (  @PI_REC_STATUS IS NULL ) OR
				  (DBO.[PKG_INVENTORY.PRC_GET_RECEIVING_CURRENT_STATUS](REC.INVREC_ID) = @PI_REC_STATUS AND @PI_REC_STATUS IS NOT NULL)
					)  

					 AND
                   (
					(  @PI_REC_NUMBER_FROM IS NULL AND @PI_REC_NUMBER_TO IS NULL ) 
						OR
					(	
						REC.CREATE_DATE BETWEEN --'2023-01-29 18:29:33.584975 +00:00' and '2023-02-03 15:40:08.529924 +00:00'
						(SELECT CREATE_DATE FROM INV_INVENTORY_RECEIVINGS_WV WHERE RECEIVING_NUMBER=@PI_REC_NUMBER_FROM) AND (SELECT CREATE_DATE FROM INV_INVENTORY_RECEIVINGS_WV WHERE RECEIVING_NUMBER=@PI_REC_NUMBER_TO) 
						AND @PI_REC_NUMBER_FROM IS NOT NULL AND @PI_REC_NUMBER_TO IS NOT NULL)
				   )
				   AND
                  ----search by Back Orders
				  (
				  (  @PI_BACK_ORDER_FLAG IS NULL ) OR
				  ( REC.RECEIVING_NUMBER LIKE '%-BO%' AND @PI_BACK_ORDER_FLAG IS NOT NULL AND @PI_BACK_ORDER_FLAG = 'Y')
					)
                          
			ORDER BY REC.RECEIVING_NUMBER ASC
				

      END TRY

     BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

CREATE PROCEDURE [dbo].[PKG_INVENTORY.PRC_GET_RECEIVINGS_DETAILS_PDF]  
   @PI_INVREC_ID				INT				= NULL,
   @PI_INVPARLOT_ID				FLOAT(53)		= NULL,
   @PI_LOT_EXPIRY_DATE_FROM		DATETIMEOFFSET	= NULL,
   @PI_LOT_EXPIRY_DATE_TO		DATETIMEOFFSET	= NULL,
   @PI_PAR_ID					FLOAT(53)		= NULL,
   @PI_NON_STOCK_ITEM_FLAG		VARCHAR(1)		= NULL,
   @PI_OH_QTY_FROM				INT				= NULL,
   @PI_OH_QTY_TO				INT				= NULL
AS 
    
   BEGIN

      BEGIN TRY

	  SELECT * FROM
			(
				SELECT	 DET.INVRECDET_ID,
					 DET.PAR_ID,
					 WAR.LOC_ID,
					 DET.SEQ_NUMBER,
					 PART.CODE AS PART_NUMBER,
					 PART.DESCRIPTION AS DESCRIPTION,
					 DET.QUANTITY,
					 DET.UOM_ID AS UOM_ID_REORDERING,
					 RUOM.CODE REORDERING_UOM,
					 [dbo].[PKG_INVENTORY.PRC_GET_PART_COST_AMOUNT](DET.PAR_ID, WAR.LOC_ID) NEGOTIATED_COST,
					 DET.COST COST,
					 ROUND(((ISNULL(DET.QUANTITY, 1) ) * ISNULL(DET.COST, 0)), 2) RECEIVING_SUBTOTAL,
					 ISNULL(ROUND(((ISNULL(DET.QUANTITY, 1) ) * ISNULL(DET.COST, 0)), 2),0) RECEIVING_SUBTOTAL_PDF,
					 DET.QTY_CONVERSION,
					  ISNULL(DET.QTY_CONVERSION,0) AS QTY_CONVERSION_PDF,

					  CASE
								WHEN ISNULL(PART.NON_STOCK_ITEM_FLAG,'N')='N' THEN

									CASE WHEN REC.RECEIVING_DATE IS  NULL THEN
										PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY](rec.PURORD_ID, det.INVPARLOT_ID) + (det.QUANTITY ))
									ELSE
										PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY](rec.PURORD_ID, det.INVPARLOT_ID) )
								END
								WHEN PART.NON_STOCK_ITEM_FLAG = 'Y' THEN

									CASE WHEN REC.RECEIVING_DATE IS  NULL THEN

										PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY_NON_STOCK](rec.PURORD_ID,DET.INVRECDET_ID,PART.PAR_ID) + (det.QUANTITY ))
									ELSE
										PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY_NON_STOCK](rec.PURORD_ID,DET.INVRECDET_ID,PART.PAR_ID) )
								END
					 END as BO_QUANTITY,
					 CASE
								WHEN ISNULL(PART.NON_STOCK_ITEM_FLAG,'N')='N' THEN
									CASE WHEN REC.RECEIVING_DATE IS  NULL THEN
										ISNULL(PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY](rec.PURORD_ID, det.INVPARLOT_ID) + (det.QUANTITY )),0)
									ELSE
										ISNULL(PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY](rec.PURORD_ID, det.INVPARLOT_ID) ) ,0)
								END
									WHEN PART.NON_STOCK_ITEM_FLAG = 'Y' THEN
										CASE WHEN REC.RECEIVING_DATE IS  NULL THEN
										ISNULL(PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY_NON_STOCK](rec.PURORD_ID,DET.INVRECDET_ID,PART.PAR_ID) + (det.QUANTITY )),0)
									ELSE
										ISNULL(PURDET.QUANTITY - ([dbo].[PKG_INVENTORY.PRC_GET_PO_RECEIVE_QTY_NON_STOCK](rec.PURORD_ID,DET.INVRECDET_ID,PART.PAR_ID) ) ,0)
									END
					 END as BO_QUANTITY_PDF,
 	
					 det.QUARANTINE_FLAG,
					 PARt.BARCODE_NUMBER,
					 LOT.CODE AS LOT_NUMBER,
					 LOT.BARCODE AS LOT_BARCODE,
					 PART.SKU_MANUFACTURE,
					 PART.UPC_MANUFACTURE,
					 PART.NON_STOCK_ITEM_FLAG,   --to handle non stock item flow
					 DET.INVPARLOT_ID,
					 DET.RACK,
					 DET.SHELF,
					 DET.BIN,
					 switchoffset(LOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')) AS EXPIRY_DATE,
					 ISNULL(CONVERT(VARCHAR(10),switchoffset(LOT.EXPIRY_DATE, DBO.[get_context_value]('USER_OFFSET')),101),' ')  AS EXPIRY_DATE_PDF,
					 PURDET.QUANTITY AS QTY_ORDERED,
					 ISNULL(PURDET.QUANTITY,0) AS QTY_ORDERED_PDF,

					 CASE
								WHEN ISNULL(PART.NON_STOCK_ITEM_FLAG,'N')='N' THEN

									  CASE 
											WHEN DET.INVPARLOT_ID IS NOT NULL THEN
												ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOT_ONHAND_TOTAL] (DET.PAR_ID, DET.INVPARLOT_ID, isnull(DATEADD(Second,-10,REC.RECEIVING_DATE),SYSDATETIMEOFFSET())),0)
											ELSE 
												0
									  END 

								WHEN PART.NON_STOCK_ITEM_FLAG = 'Y' THEN
								
										ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_ONHAND_TOTAL_NON_STOCK] (DET.PAR_ID, isnull(DATEADD(Second,-10,REC.RECEIVING_DATE),SYSDATETIMEOFFSET())),0)

						   END AS QTY_ONHAND,

					 CASE WHEN DET.INVPARLOT_ID IS NOT NULL THEN
			 
					  (ISNULL(DBO.[PKG_INVENTORY.PRC_GET_PART_LOT_AVL_TOTAL] (DET.PAR_ID, DET.INVPARLOT_ID, isnull(DATEADD(Second,-10,REC.RECEIVING_DATE),SYSDATETIMEOFFSET())),0))
					 ELSE
						0
					 END  AS QTY_AVAILABLE  ,
					 DET.WAR_ID,
					 ISNULL(war.CODE, '') + ' - ' + ISNULL(WAR.DESCRIPTION, '') AS INVENTORY
					 ,CASE WHEN DET.RESTOCK_DATE IS NOT NULL THEN
					 'Y'
					 ELSE
					 'N'
					 END AS RESTOCK_FLAG,
					 CASE WHEN DET.READY_FOR_RESTOCK_DATE IS NOT NULL THEN
					 'Y'
					 ELSE
					 'N'
					 END AS READY_FOR_RESTOCK_FLAG,
					 DET.BACK_ORDER_FLAG

        FROM INV_INVENTORY_RCV_DETAILS_WV DET
        LEFT JOIN INV_PARTS_WV PART
          ON DET.PAR_ID = PART.PAR_ID
        LEFT JOIN ADM_UOM_WV UOM
          ON PART.UOM_ID = UOM.UOM_ID
        LEFT JOIN ADM_UOM_WV RUOM
          ON RUOM.UOM_ID = DET.UOM_ID
		LEFT JOIN INV_PARTS_LOT_DETAILS_WV LOT
		  ON LOT.INVPARLOT_ID = DET.INVPARLOT_ID
        LEFT JOIN REP_WORK_ORDERS_WV WO
          ON WO.WORORD_ID = DET.WORORD_ID
        LEFT JOIN INV_PART_GROUPS_WV GR
          ON GR.PARGRO_ID = PART.PARGRO_ID
       INNER JOIN INV_INVENTORY_RECEIVINGS_WV REC
          ON REC.INVREC_ID = DET.INVREC_ID
        LEFT JOIN INV_WAREHOUSES_WV WAR
          ON WAR.WAR_ID = det.WAR_ID
		LEFT JOIN INV_PURCHASE_ORDER_DETAILS_WV PURDET
		  ON PURDET.PURORDDET_ID = DET.PURORDDET_ID
      -- LEFT JOIN INV_PART_COST_OVERRIDES_WV OVRCST ON WAR.LOC_ID = OVRCST.LOC_ID AND PART.PAR_ID=OVRCST.PAR_ID

       WHERE DET.INVREC_ID = @PI_INVREC_ID
			
				   AND
				   
                  ----search by PART/SKU  
				  (
					(  @PI_PAR_ID IS NULL ) 
							   OR
					(  PART.PAR_ID = @PI_PAR_ID AND @PI_PAR_ID IS NOT NULL)
				  )
				  
				  AND
                  ----search by LOT  
				  (
					(  @PI_INVPARLOT_ID IS NULL ) 
							   OR
					(  LOT.INVPARLOT_ID = @PI_INVPARLOT_ID AND @PI_INVPARLOT_ID IS NOT NULL)
				  )
				  
				  AND
				   ----search by LOT DATE EXPIRY (from & to)
				  (
					( @PI_LOT_EXPIRY_DATE_FROM IS NULL) 
										OR
					( 
						LOT.EXPIRY_DATE >= @PI_LOT_EXPIRY_DATE_FROM 
						AND @PI_LOT_EXPIRY_DATE_FROM IS NOT NULL
					)
				  ) 

				  AND
				   ----search by LOT DATE EXPIRY (from & to)
				  (
					( @PI_LOT_EXPIRY_DATE_TO IS NULL) 
										OR
					( 
						LOT.EXPIRY_DATE <= @PI_LOT_EXPIRY_DATE_TO 
						AND @PI_LOT_EXPIRY_DATE_TO IS NOT NULL
					)
				  ) 

				  AND
                  ----search by NON STOCK ITEMS  
				  (
					(  @PI_NON_STOCK_ITEM_FLAG IS NULL ) 
							   OR
					(  PART.NON_STOCK_ITEM_FLAG = @PI_NON_STOCK_ITEM_FLAG AND @PI_NON_STOCK_ITEM_FLAG IS NOT NULL)
				  )
			) AS REC_DET

			WHERE
                  ----search by OH QTY FROM
				  (
					(  @PI_OH_QTY_FROM IS NULL ) 
							   OR
					(  REC_DET.QTY_ONHAND >= @PI_OH_QTY_FROM AND @PI_OH_QTY_FROM IS NOT NULL)
				  )
				  AND
				  ----search by OH QTY TO
				  (
					(  @PI_OH_QTY_TO IS NULL ) 
							   OR
					(  REC_DET.QTY_ONHAND <= @PI_OH_QTY_TO AND @PI_OH_QTY_TO IS NOT NULL)
				  )

			 ORDER BY REC_DET.INVRECDET_ID ASC

      END TRY

      BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------

CREATE PROCEDURE [dbo].[PKG_INVENTORY.PRC_GET_STOCK_LOCATION_ID_MOBILE_API] 
   @PI_RACK varchar(max),
   @PI_SHELF VARCHAR(MAX),
   @PI_BIN_NUMBER VARCHAR(MAX),
   @PO_MSG VARCHAR(MAX)=NULL OUTPUT
   --,@PO_WARSTOLOC_ID FLOAT = null OUTPUT
AS 
 
   BEGIN

      BEGIN TRY

         SET @PO_MSG = NULL
		 --SET @PO_WARSTOLOC_ID  = NULL

 
         SELECT --@PO_WARSTOLOC_ID = 
		 WSTOLOC.WARSTOLOC_ID 
		 FROM INV_WAREHOUSE_STOCK_LOC_WV WSTOLOC
		 WHERE UPPER(WSTOLOC.RACK) = UPPER(@PI_RACK)
		 AND WSTOLOC.SHELF = @PI_SHELF
		 AND WSTOLOC.BIN_NUMBER = @PI_BIN_NUMBER

		  SET @PO_MSG = 'T'

		 --IF @PO_WARSTOLOC_ID IS NOT NULL 
		 --SET @PO_MSG = 'T'
		 --ELSE
		 --SET @PO_MSG = 'F'



      END TRY

      BEGIN CATCH

         DECLARE @db_raise_application_error_message nvarchar(4000)
		 SET @db_raise_application_error_message = 'An error was encountered on '+ ERROR_PROCEDURE() +' - '+ ISNULL(CAST(ERROR_NUMBER() AS nvarchar(max)), '') + ' -ERROR- ' + ERROR_MESSAGE()
		 RAISERROR(@db_raise_application_error_message, 16, 1)

      END CATCH

   END
--------------------------------------------
ALTER TABLE [dbo].[INV_INVENTORY_TRANSFERS] WITH CHECK CHECK CONSTRAINT [INVTRA_WAR_TO_FK];
--------------------------------------------
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.CUSTOMERS_DROP_SHIP_ADDRESSES'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];

----------------------------------

-- =============================================
-- Author:		<Author,,MUZAFAR>
-- Create date: <Create Date,19.02.22,>
-- Description:	<Description,Return current Status of Pick List/order ,>
-- =============================================
ALTER FUNCTION [dbo].[PKG_INVENTORY.PRC_GET_PICK_ORDER_CURRENT_STATUS]
(
	-- Add the parameters for the function here
	@PI_PICKORD_ID	FLOAT
)
RETURNS VARCHAR(50)
AS
BEGIN
	-- Declare the return variable here
	DECLARE 
	@V_RET_VALUE VARCHAR(50)

	SELECT
	@V_RET_VALUE	= 

	CASE WHEN PL.PICKORD_DATE IS NULL
		  AND PL.APPROVED_DATE IS NULL 
		  AND PL.VOID_DATE IS NULL
		  AND PL.COMPLETED_DATE IS NULL
		  AND PL.FINALIZED_DATE IS NULL THEN
			'New'

	 WHEN PL.PICKORD_DATE IS NOT NULL
		  AND PL.APPROVED_DATE IS NULL 
		  AND PL.VOID_DATE IS NULL
		  AND PL.COMPLETED_DATE IS NULL
		  AND PL.FINALIZED_DATE IS NULL THEN
			'Initiated'
	 WHEN PL.APPROVED_DATE IS NOT NULL 
		  AND PL.VOID_DATE IS NULL 
		  AND PL.COMPLETED_DATE IS NULL
		  AND PL.FINALIZED_DATE IS NULL
		  AND ISNULL(PL.SHIPPING_SUCCEED,'N') = 'N'
		  THEN 
		  	'Picked'

			WHEN PL.APPROVED_DATE IS NOT NULL 
		  AND PL.VOID_DATE IS NULL 
		  AND PL.COMPLETED_DATE IS NULL
		  AND PL.FINALIZED_DATE IS NULL 
		  AND PL.SHIPPING_SUCCEED = 'Y'
		  THEN 
		  	'Shipped'

	 WHEN PL.APPROVED_DATE IS NOT NULL 
		  AND PL.VOID_DATE IS NULL 
		  AND PL.COMPLETED_DATE IS NOT NULL
		  AND PL.FINALIZED_DATE IS NULL THEN
			'Dispatched'
	 WHEN PL.APPROVED_DATE IS NOT NULL 
		  AND PL.VOID_DATE IS NULL 
		  AND PL.COMPLETED_DATE IS NOT NULL
		  AND PL.FINALIZED_DATE IS NOT NULL THEN
		   
				'Delivered'
	WHEN PL.VOID_DATE IS NOT NULL THEN
		'Void'
	
	ELSE
	''
	END
	FROM INV_INVENTORY_PICK_ORDERS_WV PL
	WHERE PL.PICKORD_ID = @PI_PICKORD_ID


	-- Return the result of the function
	RETURN @V_RET_VALUE

END
